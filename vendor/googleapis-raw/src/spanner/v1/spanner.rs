// This file is generated by rust-protobuf 2.12.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/spanner/v1/spanner.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_12_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateSessionRequest {
    // message fields
    pub database: ::std::string::String,
    pub session: ::protobuf::SingularPtrField<Session>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSessionRequest {
    fn default() -> &'a CreateSessionRequest {
        <CreateSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSessionRequest {
    pub fn new() -> CreateSessionRequest {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // .google.spanner.v1.Session session = 2;


    pub fn get_session(&self) -> &Session {
        self.session.as_ref().unwrap_or_else(|| Session::default_instance())
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    pub fn has_session(&self) -> bool {
        self.session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: Session) {
        self.session = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut Session {
        if self.session.is_none() {
            self.session.set_default();
        }
        self.session.as_mut().unwrap()
    }

    // Take field
    pub fn take_session(&mut self) -> Session {
        self.session.take().unwrap_or_else(|| Session::new())
    }
}

impl ::protobuf::Message for CreateSessionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.session {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.session)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if let Some(ref v) = self.session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if let Some(ref v) = self.session.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSessionRequest {
        CreateSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &CreateSessionRequest| { &m.database },
                    |m: &mut CreateSessionRequest| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Session>>(
                    "session",
                    |m: &CreateSessionRequest| { &m.session },
                    |m: &mut CreateSessionRequest| { &mut m.session },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateSessionRequest>(
                    "CreateSessionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateSessionRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateSessionRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateSessionRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateSessionRequest {
    fn clear(&mut self) {
        self.database.clear();
        self.session.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Session {
    // message fields
    pub name: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub approximate_last_use_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Session {
    fn default() -> &'a Session {
        <Session as ::protobuf::Message>::default_instance()
    }
}

impl Session {
    pub fn new() -> Session {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .google.spanner.v1.Session.LabelsEntry labels = 2;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // .google.protobuf.Timestamp create_time = 3;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp approximate_last_use_time = 4;


    pub fn get_approximate_last_use_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.approximate_last_use_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_approximate_last_use_time(&mut self) {
        self.approximate_last_use_time.clear();
    }

    pub fn has_approximate_last_use_time(&self) -> bool {
        self.approximate_last_use_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approximate_last_use_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.approximate_last_use_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_approximate_last_use_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.approximate_last_use_time.is_none() {
            self.approximate_last_use_time.set_default();
        }
        self.approximate_last_use_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_approximate_last_use_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.approximate_last_use_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for Session {
    fn is_initialized(&self) -> bool {
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.approximate_last_use_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.approximate_last_use_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels);
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.approximate_last_use_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels, os)?;
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.approximate_last_use_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Session {
        Session::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Session| { &m.name },
                    |m: &mut Session| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "labels",
                    |m: &Session| { &m.labels },
                    |m: &mut Session| { &mut m.labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "create_time",
                    |m: &Session| { &m.create_time },
                    |m: &mut Session| { &mut m.create_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "approximate_last_use_time",
                    |m: &Session| { &m.approximate_last_use_time },
                    |m: &mut Session| { &mut m.approximate_last_use_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Session>(
                    "Session",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Session {
        static mut instance: ::protobuf::lazy::Lazy<Session> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Session::new)
        }
    }
}

impl ::protobuf::Clear for Session {
    fn clear(&mut self) {
        self.name.clear();
        self.labels.clear();
        self.create_time.clear();
        self.approximate_last_use_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Session {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Session {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetSessionRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetSessionRequest {
    fn default() -> &'a GetSessionRequest {
        <GetSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSessionRequest {
    pub fn new() -> GetSessionRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetSessionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetSessionRequest {
        GetSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetSessionRequest| { &m.name },
                    |m: &mut GetSessionRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetSessionRequest>(
                    "GetSessionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetSessionRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetSessionRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(GetSessionRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetSessionRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListSessionsRequest {
    // message fields
    pub database: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    pub filter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListSessionsRequest {
    fn default() -> &'a ListSessionsRequest {
        <ListSessionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListSessionsRequest {
    pub fn new() -> ListSessionsRequest {
        ::std::default::Default::default()
    }

    // string database = 1;


    pub fn get_database(&self) -> &str {
        &self.database
    }
    pub fn clear_database(&mut self) {
        self.database.clear();
    }

    // Param is passed by value, moved
    pub fn set_database(&mut self, v: ::std::string::String) {
        self.database = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database(&mut self) -> &mut ::std::string::String {
        &mut self.database
    }

    // Take field
    pub fn take_database(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.database, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // string filter = 4;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListSessionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.database)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.database.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.database);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.database.is_empty() {
            os.write_string(1, &self.database)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        if !self.filter.is_empty() {
            os.write_string(4, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListSessionsRequest {
        ListSessionsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "database",
                    |m: &ListSessionsRequest| { &m.database },
                    |m: &mut ListSessionsRequest| { &mut m.database },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "page_size",
                    |m: &ListSessionsRequest| { &m.page_size },
                    |m: &mut ListSessionsRequest| { &mut m.page_size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "page_token",
                    |m: &ListSessionsRequest| { &m.page_token },
                    |m: &mut ListSessionsRequest| { &mut m.page_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filter",
                    |m: &ListSessionsRequest| { &m.filter },
                    |m: &mut ListSessionsRequest| { &mut m.filter },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListSessionsRequest>(
                    "ListSessionsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListSessionsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListSessionsRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListSessionsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListSessionsRequest {
    fn clear(&mut self) {
        self.database.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListSessionsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListSessionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListSessionsResponse {
    // message fields
    pub sessions: ::protobuf::RepeatedField<Session>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListSessionsResponse {
    fn default() -> &'a ListSessionsResponse {
        <ListSessionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListSessionsResponse {
    pub fn new() -> ListSessionsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.v1.Session sessions = 1;


    pub fn get_sessions(&self) -> &[Session] {
        &self.sessions
    }
    pub fn clear_sessions(&mut self) {
        self.sessions.clear();
    }

    // Param is passed by value, moved
    pub fn set_sessions(&mut self, v: ::protobuf::RepeatedField<Session>) {
        self.sessions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sessions(&mut self) -> &mut ::protobuf::RepeatedField<Session> {
        &mut self.sessions
    }

    // Take field
    pub fn take_sessions(&mut self) -> ::protobuf::RepeatedField<Session> {
        ::std::mem::replace(&mut self.sessions, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListSessionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.sessions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sessions)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sessions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sessions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListSessionsResponse {
        ListSessionsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Session>>(
                    "sessions",
                    |m: &ListSessionsResponse| { &m.sessions },
                    |m: &mut ListSessionsResponse| { &mut m.sessions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "next_page_token",
                    |m: &ListSessionsResponse| { &m.next_page_token },
                    |m: &mut ListSessionsResponse| { &mut m.next_page_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListSessionsResponse>(
                    "ListSessionsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListSessionsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListSessionsResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ListSessionsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListSessionsResponse {
    fn clear(&mut self) {
        self.sessions.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListSessionsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListSessionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteSessionRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteSessionRequest {
    fn default() -> &'a DeleteSessionRequest {
        <DeleteSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteSessionRequest {
    pub fn new() -> DeleteSessionRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteSessionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteSessionRequest {
        DeleteSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeleteSessionRequest| { &m.name },
                    |m: &mut DeleteSessionRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteSessionRequest>(
                    "DeleteSessionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteSessionRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteSessionRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DeleteSessionRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteSessionRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecuteSqlRequest {
    // message fields
    pub session: ::std::string::String,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::TransactionSelector>,
    pub sql: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub param_types: ::std::collections::HashMap<::std::string::String, super::type_pb::Type>,
    pub resume_token: ::std::vec::Vec<u8>,
    pub query_mode: ExecuteSqlRequest_QueryMode,
    pub partition_token: ::std::vec::Vec<u8>,
    pub seqno: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecuteSqlRequest {
    fn default() -> &'a ExecuteSqlRequest {
        <ExecuteSqlRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExecuteSqlRequest {
    pub fn new() -> ExecuteSqlRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // .google.spanner.v1.TransactionSelector transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::TransactionSelector {
        self.transaction.as_ref().unwrap_or_else(|| super::transaction::TransactionSelector::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::TransactionSelector) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::TransactionSelector {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::TransactionSelector {
        self.transaction.take().unwrap_or_else(|| super::transaction::TransactionSelector::new())
    }

    // string sql = 3;


    pub fn get_sql(&self) -> &str {
        &self.sql
    }
    pub fn clear_sql(&mut self) {
        self.sql.clear();
    }

    // Param is passed by value, moved
    pub fn set_sql(&mut self, v: ::std::string::String) {
        self.sql = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sql(&mut self) -> &mut ::std::string::String {
        &mut self.sql
    }

    // Take field
    pub fn take_sql(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sql, ::std::string::String::new())
    }

    // .google.protobuf.Struct params = 4;


    pub fn get_params(&self) -> &::protobuf::well_known_types::Struct {
        self.params.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Struct::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> ::protobuf::well_known_types::Struct {
        self.params.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // repeated .google.spanner.v1.ExecuteSqlRequest.ParamTypesEntry param_types = 5;


    pub fn get_param_types(&self) -> &::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        &self.param_types
    }
    pub fn clear_param_types(&mut self) {
        self.param_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_param_types(&mut self, v: ::std::collections::HashMap<::std::string::String, super::type_pb::Type>) {
        self.param_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_param_types(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        &mut self.param_types
    }

    // Take field
    pub fn take_param_types(&mut self) -> ::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        ::std::mem::replace(&mut self.param_types, ::std::collections::HashMap::new())
    }

    // bytes resume_token = 6;


    pub fn get_resume_token(&self) -> &[u8] {
        &self.resume_token
    }
    pub fn clear_resume_token(&mut self) {
        self.resume_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_resume_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.resume_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resume_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.resume_token
    }

    // Take field
    pub fn take_resume_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.resume_token, ::std::vec::Vec::new())
    }

    // .google.spanner.v1.ExecuteSqlRequest.QueryMode query_mode = 7;


    pub fn get_query_mode(&self) -> ExecuteSqlRequest_QueryMode {
        self.query_mode
    }
    pub fn clear_query_mode(&mut self) {
        self.query_mode = ExecuteSqlRequest_QueryMode::NORMAL;
    }

    // Param is passed by value, moved
    pub fn set_query_mode(&mut self, v: ExecuteSqlRequest_QueryMode) {
        self.query_mode = v;
    }

    // bytes partition_token = 8;


    pub fn get_partition_token(&self) -> &[u8] {
        &self.partition_token
    }
    pub fn clear_partition_token(&mut self) {
        self.partition_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.partition_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.partition_token
    }

    // Take field
    pub fn take_partition_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.partition_token, ::std::vec::Vec::new())
    }

    // int64 seqno = 9;


    pub fn get_seqno(&self) -> i64 {
        self.seqno
    }
    pub fn clear_seqno(&mut self) {
        self.seqno = 0;
    }

    // Param is passed by value, moved
    pub fn set_seqno(&mut self, v: i64) {
        self.seqno = v;
    }
}

impl ::protobuf::Message for ExecuteSqlRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sql)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(wire_type, is, &mut self.param_types)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.resume_token)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.query_mode, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.partition_token)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.seqno = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sql.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sql);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(5, &self.param_types);
        if !self.resume_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.resume_token);
        }
        if self.query_mode != ExecuteSqlRequest_QueryMode::NORMAL {
            my_size += ::protobuf::rt::enum_size(7, self.query_mode);
        }
        if !self.partition_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.partition_token);
        }
        if self.seqno != 0 {
            my_size += ::protobuf::rt::value_size(9, self.seqno, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sql.is_empty() {
            os.write_string(3, &self.sql)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(5, &self.param_types, os)?;
        if !self.resume_token.is_empty() {
            os.write_bytes(6, &self.resume_token)?;
        }
        if self.query_mode != ExecuteSqlRequest_QueryMode::NORMAL {
            os.write_enum(7, self.query_mode.value())?;
        }
        if !self.partition_token.is_empty() {
            os.write_bytes(8, &self.partition_token)?;
        }
        if self.seqno != 0 {
            os.write_int64(9, self.seqno)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecuteSqlRequest {
        ExecuteSqlRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &ExecuteSqlRequest| { &m.session },
                    |m: &mut ExecuteSqlRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionSelector>>(
                    "transaction",
                    |m: &ExecuteSqlRequest| { &m.transaction },
                    |m: &mut ExecuteSqlRequest| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sql",
                    |m: &ExecuteSqlRequest| { &m.sql },
                    |m: &mut ExecuteSqlRequest| { &mut m.sql },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                    "params",
                    |m: &ExecuteSqlRequest| { &m.params },
                    |m: &mut ExecuteSqlRequest| { &mut m.params },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(
                    "param_types",
                    |m: &ExecuteSqlRequest| { &m.param_types },
                    |m: &mut ExecuteSqlRequest| { &mut m.param_types },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "resume_token",
                    |m: &ExecuteSqlRequest| { &m.resume_token },
                    |m: &mut ExecuteSqlRequest| { &mut m.resume_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ExecuteSqlRequest_QueryMode>>(
                    "query_mode",
                    |m: &ExecuteSqlRequest| { &m.query_mode },
                    |m: &mut ExecuteSqlRequest| { &mut m.query_mode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "partition_token",
                    |m: &ExecuteSqlRequest| { &m.partition_token },
                    |m: &mut ExecuteSqlRequest| { &mut m.partition_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "seqno",
                    |m: &ExecuteSqlRequest| { &m.seqno },
                    |m: &mut ExecuteSqlRequest| { &mut m.seqno },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecuteSqlRequest>(
                    "ExecuteSqlRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExecuteSqlRequest {
        static mut instance: ::protobuf::lazy::Lazy<ExecuteSqlRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ExecuteSqlRequest::new)
        }
    }
}

impl ::protobuf::Clear for ExecuteSqlRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction.clear();
        self.sql.clear();
        self.params.clear();
        self.param_types.clear();
        self.resume_token.clear();
        self.query_mode = ExecuteSqlRequest_QueryMode::NORMAL;
        self.partition_token.clear();
        self.seqno = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecuteSqlRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteSqlRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ExecuteSqlRequest_QueryMode {
    NORMAL = 0,
    PLAN = 1,
    PROFILE = 2,
}

impl ::protobuf::ProtobufEnum for ExecuteSqlRequest_QueryMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExecuteSqlRequest_QueryMode> {
        match value {
            0 => ::std::option::Option::Some(ExecuteSqlRequest_QueryMode::NORMAL),
            1 => ::std::option::Option::Some(ExecuteSqlRequest_QueryMode::PLAN),
            2 => ::std::option::Option::Some(ExecuteSqlRequest_QueryMode::PROFILE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ExecuteSqlRequest_QueryMode] = &[
            ExecuteSqlRequest_QueryMode::NORMAL,
            ExecuteSqlRequest_QueryMode::PLAN,
            ExecuteSqlRequest_QueryMode::PROFILE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<ExecuteSqlRequest_QueryMode>("ExecuteSqlRequest.QueryMode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ExecuteSqlRequest_QueryMode {
}

impl ::std::default::Default for ExecuteSqlRequest_QueryMode {
    fn default() -> Self {
        ExecuteSqlRequest_QueryMode::NORMAL
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecuteSqlRequest_QueryMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionOptions {
    // message fields
    pub partition_size_bytes: i64,
    pub max_partitions: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionOptions {
    fn default() -> &'a PartitionOptions {
        <PartitionOptions as ::protobuf::Message>::default_instance()
    }
}

impl PartitionOptions {
    pub fn new() -> PartitionOptions {
        ::std::default::Default::default()
    }

    // int64 partition_size_bytes = 1;


    pub fn get_partition_size_bytes(&self) -> i64 {
        self.partition_size_bytes
    }
    pub fn clear_partition_size_bytes(&mut self) {
        self.partition_size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_partition_size_bytes(&mut self, v: i64) {
        self.partition_size_bytes = v;
    }

    // int64 max_partitions = 2;


    pub fn get_max_partitions(&self) -> i64 {
        self.max_partitions
    }
    pub fn clear_max_partitions(&mut self) {
        self.max_partitions = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_partitions(&mut self, v: i64) {
        self.max_partitions = v;
    }
}

impl ::protobuf::Message for PartitionOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.partition_size_bytes = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_partitions = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.partition_size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(1, self.partition_size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_partitions != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_partitions, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.partition_size_bytes != 0 {
            os.write_int64(1, self.partition_size_bytes)?;
        }
        if self.max_partitions != 0 {
            os.write_int64(2, self.max_partitions)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionOptions {
        PartitionOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "partition_size_bytes",
                    |m: &PartitionOptions| { &m.partition_size_bytes },
                    |m: &mut PartitionOptions| { &mut m.partition_size_bytes },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "max_partitions",
                    |m: &PartitionOptions| { &m.max_partitions },
                    |m: &mut PartitionOptions| { &mut m.max_partitions },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionOptions>(
                    "PartitionOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PartitionOptions {
        static mut instance: ::protobuf::lazy::Lazy<PartitionOptions> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PartitionOptions::new)
        }
    }
}

impl ::protobuf::Clear for PartitionOptions {
    fn clear(&mut self) {
        self.partition_size_bytes = 0;
        self.max_partitions = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionQueryRequest {
    // message fields
    pub session: ::std::string::String,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::TransactionSelector>,
    pub sql: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub param_types: ::std::collections::HashMap<::std::string::String, super::type_pb::Type>,
    pub partition_options: ::protobuf::SingularPtrField<PartitionOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionQueryRequest {
    fn default() -> &'a PartitionQueryRequest {
        <PartitionQueryRequest as ::protobuf::Message>::default_instance()
    }
}

impl PartitionQueryRequest {
    pub fn new() -> PartitionQueryRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // .google.spanner.v1.TransactionSelector transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::TransactionSelector {
        self.transaction.as_ref().unwrap_or_else(|| super::transaction::TransactionSelector::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::TransactionSelector) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::TransactionSelector {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::TransactionSelector {
        self.transaction.take().unwrap_or_else(|| super::transaction::TransactionSelector::new())
    }

    // string sql = 3;


    pub fn get_sql(&self) -> &str {
        &self.sql
    }
    pub fn clear_sql(&mut self) {
        self.sql.clear();
    }

    // Param is passed by value, moved
    pub fn set_sql(&mut self, v: ::std::string::String) {
        self.sql = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sql(&mut self) -> &mut ::std::string::String {
        &mut self.sql
    }

    // Take field
    pub fn take_sql(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sql, ::std::string::String::new())
    }

    // .google.protobuf.Struct params = 4;


    pub fn get_params(&self) -> &::protobuf::well_known_types::Struct {
        self.params.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Struct::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> ::protobuf::well_known_types::Struct {
        self.params.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // repeated .google.spanner.v1.PartitionQueryRequest.ParamTypesEntry param_types = 5;


    pub fn get_param_types(&self) -> &::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        &self.param_types
    }
    pub fn clear_param_types(&mut self) {
        self.param_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_param_types(&mut self, v: ::std::collections::HashMap<::std::string::String, super::type_pb::Type>) {
        self.param_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_param_types(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        &mut self.param_types
    }

    // Take field
    pub fn take_param_types(&mut self) -> ::std::collections::HashMap<::std::string::String, super::type_pb::Type> {
        ::std::mem::replace(&mut self.param_types, ::std::collections::HashMap::new())
    }

    // .google.spanner.v1.PartitionOptions partition_options = 6;


    pub fn get_partition_options(&self) -> &PartitionOptions {
        self.partition_options.as_ref().unwrap_or_else(|| PartitionOptions::default_instance())
    }
    pub fn clear_partition_options(&mut self) {
        self.partition_options.clear();
    }

    pub fn has_partition_options(&self) -> bool {
        self.partition_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_options(&mut self, v: PartitionOptions) {
        self.partition_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_options(&mut self) -> &mut PartitionOptions {
        if self.partition_options.is_none() {
            self.partition_options.set_default();
        }
        self.partition_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_options(&mut self) -> PartitionOptions {
        self.partition_options.take().unwrap_or_else(|| PartitionOptions::new())
    }
}

impl ::protobuf::Message for PartitionQueryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.partition_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sql)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(wire_type, is, &mut self.param_types)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sql.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sql);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(5, &self.param_types);
        if let Some(ref v) = self.partition_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sql.is_empty() {
            os.write_string(3, &self.sql)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(5, &self.param_types, os)?;
        if let Some(ref v) = self.partition_options.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionQueryRequest {
        PartitionQueryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &PartitionQueryRequest| { &m.session },
                    |m: &mut PartitionQueryRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionSelector>>(
                    "transaction",
                    |m: &PartitionQueryRequest| { &m.transaction },
                    |m: &mut PartitionQueryRequest| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "sql",
                    |m: &PartitionQueryRequest| { &m.sql },
                    |m: &mut PartitionQueryRequest| { &mut m.sql },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                    "params",
                    |m: &PartitionQueryRequest| { &m.params },
                    |m: &mut PartitionQueryRequest| { &mut m.params },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::type_pb::Type>>(
                    "param_types",
                    |m: &PartitionQueryRequest| { &m.param_types },
                    |m: &mut PartitionQueryRequest| { &mut m.param_types },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartitionOptions>>(
                    "partition_options",
                    |m: &PartitionQueryRequest| { &m.partition_options },
                    |m: &mut PartitionQueryRequest| { &mut m.partition_options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionQueryRequest>(
                    "PartitionQueryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PartitionQueryRequest {
        static mut instance: ::protobuf::lazy::Lazy<PartitionQueryRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PartitionQueryRequest::new)
        }
    }
}

impl ::protobuf::Clear for PartitionQueryRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction.clear();
        self.sql.clear();
        self.params.clear();
        self.param_types.clear();
        self.partition_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionQueryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionQueryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionReadRequest {
    // message fields
    pub session: ::std::string::String,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::TransactionSelector>,
    pub table: ::std::string::String,
    pub index: ::std::string::String,
    pub columns: ::protobuf::RepeatedField<::std::string::String>,
    pub key_set: ::protobuf::SingularPtrField<super::keys::KeySet>,
    pub partition_options: ::protobuf::SingularPtrField<PartitionOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionReadRequest {
    fn default() -> &'a PartitionReadRequest {
        <PartitionReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl PartitionReadRequest {
    pub fn new() -> PartitionReadRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // .google.spanner.v1.TransactionSelector transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::TransactionSelector {
        self.transaction.as_ref().unwrap_or_else(|| super::transaction::TransactionSelector::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::TransactionSelector) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::TransactionSelector {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::TransactionSelector {
        self.transaction.take().unwrap_or_else(|| super::transaction::TransactionSelector::new())
    }

    // string table = 3;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string index = 4;


    pub fn get_index(&self) -> &str {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::string::String) {
        self.index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index(&mut self) -> &mut ::std::string::String {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index, ::std::string::String::new())
    }

    // repeated string columns = 5;


    pub fn get_columns(&self) -> &[::std::string::String] {
        &self.columns
    }
    pub fn clear_columns(&mut self) {
        self.columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_columns(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_columns(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.columns
    }

    // Take field
    pub fn take_columns(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.columns, ::protobuf::RepeatedField::new())
    }

    // .google.spanner.v1.KeySet key_set = 6;


    pub fn get_key_set(&self) -> &super::keys::KeySet {
        self.key_set.as_ref().unwrap_or_else(|| super::keys::KeySet::default_instance())
    }
    pub fn clear_key_set(&mut self) {
        self.key_set.clear();
    }

    pub fn has_key_set(&self) -> bool {
        self.key_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_set(&mut self, v: super::keys::KeySet) {
        self.key_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_set(&mut self) -> &mut super::keys::KeySet {
        if self.key_set.is_none() {
            self.key_set.set_default();
        }
        self.key_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_set(&mut self) -> super::keys::KeySet {
        self.key_set.take().unwrap_or_else(|| super::keys::KeySet::new())
    }

    // .google.spanner.v1.PartitionOptions partition_options = 9;


    pub fn get_partition_options(&self) -> &PartitionOptions {
        self.partition_options.as_ref().unwrap_or_else(|| PartitionOptions::default_instance())
    }
    pub fn clear_partition_options(&mut self) {
        self.partition_options.clear();
    }

    pub fn has_partition_options(&self) -> bool {
        self.partition_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_options(&mut self, v: PartitionOptions) {
        self.partition_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_options(&mut self) -> &mut PartitionOptions {
        if self.partition_options.is_none() {
            self.partition_options.set_default();
        }
        self.partition_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_options(&mut self) -> PartitionOptions {
        self.partition_options.take().unwrap_or_else(|| PartitionOptions::new())
    }
}

impl ::protobuf::Message for PartitionReadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key_set {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.partition_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.columns)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_set)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.table);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.index);
        }
        for value in &self.columns {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(ref v) = self.key_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.partition_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.table.is_empty() {
            os.write_string(3, &self.table)?;
        }
        if !self.index.is_empty() {
            os.write_string(4, &self.index)?;
        }
        for v in &self.columns {
            os.write_string(5, &v)?;
        };
        if let Some(ref v) = self.key_set.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.partition_options.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionReadRequest {
        PartitionReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &PartitionReadRequest| { &m.session },
                    |m: &mut PartitionReadRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionSelector>>(
                    "transaction",
                    |m: &PartitionReadRequest| { &m.transaction },
                    |m: &mut PartitionReadRequest| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &PartitionReadRequest| { &m.table },
                    |m: &mut PartitionReadRequest| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "index",
                    |m: &PartitionReadRequest| { &m.index },
                    |m: &mut PartitionReadRequest| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "columns",
                    |m: &PartitionReadRequest| { &m.columns },
                    |m: &mut PartitionReadRequest| { &mut m.columns },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::KeySet>>(
                    "key_set",
                    |m: &PartitionReadRequest| { &m.key_set },
                    |m: &mut PartitionReadRequest| { &mut m.key_set },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartitionOptions>>(
                    "partition_options",
                    |m: &PartitionReadRequest| { &m.partition_options },
                    |m: &mut PartitionReadRequest| { &mut m.partition_options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionReadRequest>(
                    "PartitionReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PartitionReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<PartitionReadRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PartitionReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for PartitionReadRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction.clear();
        self.table.clear();
        self.index.clear();
        self.columns.clear();
        self.key_set.clear();
        self.partition_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Partition {
    // message fields
    pub partition_token: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Partition {
    fn default() -> &'a Partition {
        <Partition as ::protobuf::Message>::default_instance()
    }
}

impl Partition {
    pub fn new() -> Partition {
        ::std::default::Default::default()
    }

    // bytes partition_token = 1;


    pub fn get_partition_token(&self) -> &[u8] {
        &self.partition_token
    }
    pub fn clear_partition_token(&mut self) {
        self.partition_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.partition_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.partition_token
    }

    // Take field
    pub fn take_partition_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.partition_token, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Partition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.partition_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.partition_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.partition_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.partition_token.is_empty() {
            os.write_bytes(1, &self.partition_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Partition {
        Partition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "partition_token",
                    |m: &Partition| { &m.partition_token },
                    |m: &mut Partition| { &mut m.partition_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<Partition>(
                    "Partition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Partition {
        static mut instance: ::protobuf::lazy::Lazy<Partition> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(Partition::new)
        }
    }
}

impl ::protobuf::Clear for Partition {
    fn clear(&mut self) {
        self.partition_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Partition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Partition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionResponse {
    // message fields
    pub partitions: ::protobuf::RepeatedField<Partition>,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartitionResponse {
    fn default() -> &'a PartitionResponse {
        <PartitionResponse as ::protobuf::Message>::default_instance()
    }
}

impl PartitionResponse {
    pub fn new() -> PartitionResponse {
        ::std::default::Default::default()
    }

    // repeated .google.spanner.v1.Partition partitions = 1;


    pub fn get_partitions(&self) -> &[Partition] {
        &self.partitions
    }
    pub fn clear_partitions(&mut self) {
        self.partitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_partitions(&mut self, v: ::protobuf::RepeatedField<Partition>) {
        self.partitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partitions(&mut self) -> &mut ::protobuf::RepeatedField<Partition> {
        &mut self.partitions
    }

    // Take field
    pub fn take_partitions(&mut self) -> ::protobuf::RepeatedField<Partition> {
        ::std::mem::replace(&mut self.partitions, ::protobuf::RepeatedField::new())
    }

    // .google.spanner.v1.Transaction transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::Transaction {
        self.transaction.as_ref().unwrap_or_else(|| super::transaction::Transaction::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::Transaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::Transaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::Transaction {
        self.transaction.take().unwrap_or_else(|| super::transaction::Transaction::new())
    }
}

impl ::protobuf::Message for PartitionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.partitions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.partitions)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.partitions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.partitions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionResponse {
        PartitionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Partition>>(
                    "partitions",
                    |m: &PartitionResponse| { &m.partitions },
                    |m: &mut PartitionResponse| { &mut m.partitions },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::Transaction>>(
                    "transaction",
                    |m: &PartitionResponse| { &m.transaction },
                    |m: &mut PartitionResponse| { &mut m.transaction },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartitionResponse>(
                    "PartitionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PartitionResponse {
        static mut instance: ::protobuf::lazy::Lazy<PartitionResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(PartitionResponse::new)
        }
    }
}

impl ::protobuf::Clear for PartitionResponse {
    fn clear(&mut self) {
        self.partitions.clear();
        self.transaction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub session: ::std::string::String,
    pub transaction: ::protobuf::SingularPtrField<super::transaction::TransactionSelector>,
    pub table: ::std::string::String,
    pub index: ::std::string::String,
    pub columns: ::protobuf::RepeatedField<::std::string::String>,
    pub key_set: ::protobuf::SingularPtrField<super::keys::KeySet>,
    pub limit: i64,
    pub resume_token: ::std::vec::Vec<u8>,
    pub partition_token: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // .google.spanner.v1.TransactionSelector transaction = 2;


    pub fn get_transaction(&self) -> &super::transaction::TransactionSelector {
        self.transaction.as_ref().unwrap_or_else(|| super::transaction::TransactionSelector::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: super::transaction::TransactionSelector) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut super::transaction::TransactionSelector {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> super::transaction::TransactionSelector {
        self.transaction.take().unwrap_or_else(|| super::transaction::TransactionSelector::new())
    }

    // string table = 3;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string index = 4;


    pub fn get_index(&self) -> &str {
        &self.index
    }
    pub fn clear_index(&mut self) {
        self.index.clear();
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: ::std::string::String) {
        self.index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_index(&mut self) -> &mut ::std::string::String {
        &mut self.index
    }

    // Take field
    pub fn take_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.index, ::std::string::String::new())
    }

    // repeated string columns = 5;


    pub fn get_columns(&self) -> &[::std::string::String] {
        &self.columns
    }
    pub fn clear_columns(&mut self) {
        self.columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_columns(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_columns(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.columns
    }

    // Take field
    pub fn take_columns(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.columns, ::protobuf::RepeatedField::new())
    }

    // .google.spanner.v1.KeySet key_set = 6;


    pub fn get_key_set(&self) -> &super::keys::KeySet {
        self.key_set.as_ref().unwrap_or_else(|| super::keys::KeySet::default_instance())
    }
    pub fn clear_key_set(&mut self) {
        self.key_set.clear();
    }

    pub fn has_key_set(&self) -> bool {
        self.key_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_set(&mut self, v: super::keys::KeySet) {
        self.key_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_set(&mut self) -> &mut super::keys::KeySet {
        if self.key_set.is_none() {
            self.key_set.set_default();
        }
        self.key_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_set(&mut self) -> super::keys::KeySet {
        self.key_set.take().unwrap_or_else(|| super::keys::KeySet::new())
    }

    // int64 limit = 8;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // bytes resume_token = 9;


    pub fn get_resume_token(&self) -> &[u8] {
        &self.resume_token
    }
    pub fn clear_resume_token(&mut self) {
        self.resume_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_resume_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.resume_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resume_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.resume_token
    }

    // Take field
    pub fn take_resume_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.resume_token, ::std::vec::Vec::new())
    }

    // bytes partition_token = 10;


    pub fn get_partition_token(&self) -> &[u8] {
        &self.partition_token
    }
    pub fn clear_partition_token(&mut self) {
        self.partition_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_partition_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.partition_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.partition_token
    }

    // Take field
    pub fn take_partition_token(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.partition_token, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key_set {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.index)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.columns)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_set)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.resume_token)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.partition_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.table);
        }
        if !self.index.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.index);
        }
        for value in &self.columns {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(ref v) = self.key_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(8, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.resume_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.resume_token);
        }
        if !self.partition_token.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.partition_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.table.is_empty() {
            os.write_string(3, &self.table)?;
        }
        if !self.index.is_empty() {
            os.write_string(4, &self.index)?;
        }
        for v in &self.columns {
            os.write_string(5, &v)?;
        };
        if let Some(ref v) = self.key_set.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.limit != 0 {
            os.write_int64(8, self.limit)?;
        }
        if !self.resume_token.is_empty() {
            os.write_bytes(9, &self.resume_token)?;
        }
        if !self.partition_token.is_empty() {
            os.write_bytes(10, &self.partition_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &ReadRequest| { &m.session },
                    |m: &mut ReadRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionSelector>>(
                    "transaction",
                    |m: &ReadRequest| { &m.transaction },
                    |m: &mut ReadRequest| { &mut m.transaction },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &ReadRequest| { &m.table },
                    |m: &mut ReadRequest| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "index",
                    |m: &ReadRequest| { &m.index },
                    |m: &mut ReadRequest| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "columns",
                    |m: &ReadRequest| { &m.columns },
                    |m: &mut ReadRequest| { &mut m.columns },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::KeySet>>(
                    "key_set",
                    |m: &ReadRequest| { &m.key_set },
                    |m: &mut ReadRequest| { &mut m.key_set },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ReadRequest| { &m.limit },
                    |m: &mut ReadRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "resume_token",
                    |m: &ReadRequest| { &m.resume_token },
                    |m: &mut ReadRequest| { &mut m.resume_token },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "partition_token",
                    |m: &ReadRequest| { &m.partition_token },
                    |m: &mut ReadRequest| { &mut m.partition_token },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRequest>(
                    "ReadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReadRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReadRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReadRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction.clear();
        self.table.clear();
        self.index.clear();
        self.columns.clear();
        self.key_set.clear();
        self.limit = 0;
        self.resume_token.clear();
        self.partition_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeginTransactionRequest {
    // message fields
    pub session: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<super::transaction::TransactionOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BeginTransactionRequest {
    fn default() -> &'a BeginTransactionRequest {
        <BeginTransactionRequest as ::protobuf::Message>::default_instance()
    }
}

impl BeginTransactionRequest {
    pub fn new() -> BeginTransactionRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // .google.spanner.v1.TransactionOptions options = 2;


    pub fn get_options(&self) -> &super::transaction::TransactionOptions {
        self.options.as_ref().unwrap_or_else(|| super::transaction::TransactionOptions::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::transaction::TransactionOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::transaction::TransactionOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::transaction::TransactionOptions {
        self.options.take().unwrap_or_else(|| super::transaction::TransactionOptions::new())
    }
}

impl ::protobuf::Message for BeginTransactionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeginTransactionRequest {
        BeginTransactionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &BeginTransactionRequest| { &m.session },
                    |m: &mut BeginTransactionRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionOptions>>(
                    "options",
                    |m: &BeginTransactionRequest| { &m.options },
                    |m: &mut BeginTransactionRequest| { &mut m.options },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<BeginTransactionRequest>(
                    "BeginTransactionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeginTransactionRequest {
        static mut instance: ::protobuf::lazy::Lazy<BeginTransactionRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(BeginTransactionRequest::new)
        }
    }
}

impl ::protobuf::Clear for BeginTransactionRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeginTransactionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeginTransactionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitRequest {
    // message fields
    pub session: ::std::string::String,
    pub mutations: ::protobuf::RepeatedField<super::mutation::Mutation>,
    // message oneof groups
    pub transaction: ::std::option::Option<CommitRequest_oneof_transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitRequest {
    fn default() -> &'a CommitRequest {
        <CommitRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CommitRequest_oneof_transaction {
    transaction_id(::std::vec::Vec<u8>),
    single_use_transaction(super::transaction::TransactionOptions),
}

impl CommitRequest {
    pub fn new() -> CommitRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction = ::std::option::Option::None;
    }

    pub fn has_transaction_id(&self) -> bool {
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(_)) = self.transaction {
        } else {
            self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(::std::vec::Vec::new()));
        }
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_transaction_id() {
            match self.transaction.take() {
                ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .google.spanner.v1.TransactionOptions single_use_transaction = 3;


    pub fn get_single_use_transaction(&self) -> &super::transaction::TransactionOptions {
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(ref v)) => v,
            _ => super::transaction::TransactionOptions::default_instance(),
        }
    }
    pub fn clear_single_use_transaction(&mut self) {
        self.transaction = ::std::option::Option::None;
    }

    pub fn has_single_use_transaction(&self) -> bool {
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single_use_transaction(&mut self, v: super::transaction::TransactionOptions) {
        self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single_use_transaction(&mut self) -> &mut super::transaction::TransactionOptions {
        if let ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(_)) = self.transaction {
        } else {
            self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(super::transaction::TransactionOptions::new()));
        }
        match self.transaction {
            ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single_use_transaction(&mut self) -> super::transaction::TransactionOptions {
        if self.has_single_use_transaction() {
            match self.transaction.take() {
                ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(v)) => v,
                _ => panic!(),
            }
        } else {
            super::transaction::TransactionOptions::new()
        }
    }

    // repeated .google.spanner.v1.Mutation mutations = 4;


    pub fn get_mutations(&self) -> &[super::mutation::Mutation] {
        &self.mutations
    }
    pub fn clear_mutations(&mut self) {
        self.mutations.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutations(&mut self, v: ::protobuf::RepeatedField<super::mutation::Mutation>) {
        self.mutations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mutations(&mut self) -> &mut ::protobuf::RepeatedField<super::mutation::Mutation> {
        &mut self.mutations
    }

    // Take field
    pub fn take_mutations(&mut self) -> ::protobuf::RepeatedField<super::mutation::Mutation> {
        ::std::mem::replace(&mut self.mutations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CommitRequest {
    fn is_initialized(&self) -> bool {
        if let Some(CommitRequest_oneof_transaction::single_use_transaction(ref v)) = self.transaction {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.mutations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::transaction_id(is.read_bytes()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transaction = ::std::option::Option::Some(CommitRequest_oneof_transaction::single_use_transaction(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mutations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        for value in &self.mutations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.transaction {
            match v {
                &CommitRequest_oneof_transaction::transaction_id(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &CommitRequest_oneof_transaction::single_use_transaction(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        for v in &self.mutations {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.transaction {
            match v {
                &CommitRequest_oneof_transaction::transaction_id(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &CommitRequest_oneof_transaction::single_use_transaction(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitRequest {
        CommitRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &CommitRequest| { &m.session },
                    |m: &mut CommitRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "transaction_id",
                    CommitRequest::has_transaction_id,
                    CommitRequest::get_transaction_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::transaction::TransactionOptions>(
                    "single_use_transaction",
                    CommitRequest::has_single_use_transaction,
                    CommitRequest::get_single_use_transaction,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::mutation::Mutation>>(
                    "mutations",
                    |m: &CommitRequest| { &m.mutations },
                    |m: &mut CommitRequest| { &mut m.mutations },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitRequest>(
                    "CommitRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitRequest {
        static mut instance: ::protobuf::lazy::Lazy<CommitRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CommitRequest::new)
        }
    }
}

impl ::protobuf::Clear for CommitRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction = ::std::option::Option::None;
        self.transaction = ::std::option::Option::None;
        self.mutations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitResponse {
    // message fields
    pub commit_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitResponse {
    fn default() -> &'a CommitResponse {
        <CommitResponse as ::protobuf::Message>::default_instance()
    }
}

impl CommitResponse {
    pub fn new() -> CommitResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp commit_timestamp = 1;


    pub fn get_commit_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.commit_timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_commit_timestamp(&mut self) {
        self.commit_timestamp.clear();
    }

    pub fn has_commit_timestamp(&self) -> bool {
        self.commit_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.commit_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.commit_timestamp.is_none() {
            self.commit_timestamp.set_default();
        }
        self.commit_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.commit_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CommitResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.commit_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commit_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.commit_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.commit_timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitResponse {
        CommitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "commit_timestamp",
                    |m: &CommitResponse| { &m.commit_timestamp },
                    |m: &mut CommitResponse| { &mut m.commit_timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitResponse>(
                    "CommitResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CommitResponse {
        static mut instance: ::protobuf::lazy::Lazy<CommitResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CommitResponse::new)
        }
    }
}

impl ::protobuf::Clear for CommitResponse {
    fn clear(&mut self) {
        self.commit_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackRequest {
    // message fields
    pub session: ::std::string::String,
    pub transaction_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackRequest {
    fn default() -> &'a RollbackRequest {
        <RollbackRequest as ::protobuf::Message>::default_instance()
    }
}

impl RollbackRequest {
    pub fn new() -> RollbackRequest {
        ::std::default::Default::default()
    }

    // string session = 1;


    pub fn get_session(&self) -> &str {
        &self.session
    }
    pub fn clear_session(&mut self) {
        self.session.clear();
    }

    // Param is passed by value, moved
    pub fn set_session(&mut self, v: ::std::string::String) {
        self.session = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session(&mut self) -> &mut ::std::string::String {
        &mut self.session
    }

    // Take field
    pub fn take_session(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session, ::std::string::String::new())
    }

    // bytes transaction_id = 2;


    pub fn get_transaction_id(&self) -> &[u8] {
        &self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_id
    }

    // Take field
    pub fn take_transaction_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RollbackRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session);
        }
        if !self.transaction_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.transaction_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session.is_empty() {
            os.write_string(1, &self.session)?;
        }
        if !self.transaction_id.is_empty() {
            os.write_bytes(2, &self.transaction_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackRequest {
        RollbackRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "session",
                    |m: &RollbackRequest| { &m.session },
                    |m: &mut RollbackRequest| { &mut m.session },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transaction_id",
                    |m: &RollbackRequest| { &m.transaction_id },
                    |m: &mut RollbackRequest| { &mut m.transaction_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RollbackRequest>(
                    "RollbackRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RollbackRequest {
        static mut instance: ::protobuf::lazy::Lazy<RollbackRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RollbackRequest::new)
        }
    }
}

impl ::protobuf::Clear for RollbackRequest {
    fn clear(&mut self) {
        self.session.clear();
        self.transaction_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fgoogle/spanner/v1/spanner.proto\x12\x11google.spanner.v1\x1a\x1cgo\
    ogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoo\
    gle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1c\
    google/spanner/v1/keys.proto\x1a\x20google/spanner/v1/mutation.proto\x1a\
    \"google/spanner/v1/result_set.proto\x1a#google/spanner/v1/transaction.p\
    roto\x1a\x1cgoogle/spanner/v1/type.proto\"h\n\x14CreateSessionRequest\
    \x12\x1a\n\x08database\x18\x01\x20\x01(\tR\x08database\x124\n\x07session\
    \x18\x02\x20\x01(\x0b2\x1a.google.spanner.v1.SessionR\x07session\"\xac\
    \x02\n\x07Session\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12>\n\
    \x06labels\x18\x02\x20\x03(\x0b2&.google.spanner.v1.Session.LabelsEntryR\
    \x06labels\x12;\n\x0bcreate_time\x18\x03\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\ncreateTime\x12U\n\x19approximate_last_use_time\x18\x04\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x16approximateLastUseTime\
    \x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"'\n\x11GetSessio\
    nRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\x85\x01\n\x13Li\
    stSessionsRequest\x12\x1a\n\x08database\x18\x01\x20\x01(\tR\x08database\
    \x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_\
    token\x18\x03\x20\x01(\tR\tpageToken\x12\x16\n\x06filter\x18\x04\x20\x01\
    (\tR\x06filter\"v\n\x14ListSessionsResponse\x126\n\x08sessions\x18\x01\
    \x20\x03(\x0b2\x1a.google.spanner.v1.SessionR\x08sessions\x12&\n\x0fnext\
    _page_token\x18\x02\x20\x01(\tR\rnextPageToken\"*\n\x14DeleteSessionRequ\
    est\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\xca\x04\n\x11Execute\
    SqlRequest\x12\x18\n\x07session\x18\x01\x20\x01(\tR\x07session\x12H\n\
    \x0btransaction\x18\x02\x20\x01(\x0b2&.google.spanner.v1.TransactionSele\
    ctorR\x0btransaction\x12\x10\n\x03sql\x18\x03\x20\x01(\tR\x03sql\x12/\n\
    \x06params\x18\x04\x20\x01(\x0b2\x17.google.protobuf.StructR\x06params\
    \x12U\n\x0bparam_types\x18\x05\x20\x03(\x0b24.google.spanner.v1.ExecuteS\
    qlRequest.ParamTypesEntryR\nparamTypes\x12!\n\x0cresume_token\x18\x06\
    \x20\x01(\x0cR\x0bresumeToken\x12M\n\nquery_mode\x18\x07\x20\x01(\x0e2..\
    google.spanner.v1.ExecuteSqlRequest.QueryModeR\tqueryMode\x12'\n\x0fpart\
    ition_token\x18\x08\x20\x01(\x0cR\x0epartitionToken\x12\x14\n\x05seqno\
    \x18\t\x20\x01(\x03R\x05seqno\x1aV\n\x0fParamTypesEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12-\n\x05value\x18\x02\x20\x01(\x0b2\x17.go\
    ogle.spanner.v1.TypeR\x05value:\x028\x01\".\n\tQueryMode\x12\n\n\x06NORM\
    AL\x10\0\x12\x08\n\x04PLAN\x10\x01\x12\x0b\n\x07PROFILE\x10\x02\"k\n\x10\
    PartitionOptions\x120\n\x14partition_size_bytes\x18\x01\x20\x01(\x03R\
    \x12partitionSizeBytes\x12%\n\x0emax_partitions\x18\x02\x20\x01(\x03R\rm\
    axPartitions\"\xc3\x03\n\x15PartitionQueryRequest\x12\x18\n\x07session\
    \x18\x01\x20\x01(\tR\x07session\x12H\n\x0btransaction\x18\x02\x20\x01(\
    \x0b2&.google.spanner.v1.TransactionSelectorR\x0btransaction\x12\x10\n\
    \x03sql\x18\x03\x20\x01(\tR\x03sql\x12/\n\x06params\x18\x04\x20\x01(\x0b\
    2\x17.google.protobuf.StructR\x06params\x12Y\n\x0bparam_types\x18\x05\
    \x20\x03(\x0b28.google.spanner.v1.PartitionQueryRequest.ParamTypesEntryR\
    \nparamTypes\x12P\n\x11partition_options\x18\x06\x20\x01(\x0b2#.google.s\
    panner.v1.PartitionOptionsR\x10partitionOptions\x1aV\n\x0fParamTypesEntr\
    y\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12-\n\x05value\x18\x02\
    \x20\x01(\x0b2\x17.google.spanner.v1.TypeR\x05value:\x028\x01\"\xc6\x02\
    \n\x14PartitionReadRequest\x12\x18\n\x07session\x18\x01\x20\x01(\tR\x07s\
    ession\x12H\n\x0btransaction\x18\x02\x20\x01(\x0b2&.google.spanner.v1.Tr\
    ansactionSelectorR\x0btransaction\x12\x14\n\x05table\x18\x03\x20\x01(\tR\
    \x05table\x12\x14\n\x05index\x18\x04\x20\x01(\tR\x05index\x12\x18\n\x07c\
    olumns\x18\x05\x20\x03(\tR\x07columns\x122\n\x07key_set\x18\x06\x20\x01(\
    \x0b2\x19.google.spanner.v1.KeySetR\x06keySet\x12P\n\x11partition_option\
    s\x18\t\x20\x01(\x0b2#.google.spanner.v1.PartitionOptionsR\x10partitionO\
    ptions\"4\n\tPartition\x12'\n\x0fpartition_token\x18\x01\x20\x01(\x0cR\
    \x0epartitionToken\"\x93\x01\n\x11PartitionResponse\x12<\n\npartitions\
    \x18\x01\x20\x03(\x0b2\x1c.google.spanner.v1.PartitionR\npartitions\x12@\
    \n\x0btransaction\x18\x02\x20\x01(\x0b2\x1e.google.spanner.v1.Transactio\
    nR\x0btransaction\"\xcd\x02\n\x0bReadRequest\x12\x18\n\x07session\x18\
    \x01\x20\x01(\tR\x07session\x12H\n\x0btransaction\x18\x02\x20\x01(\x0b2&\
    .google.spanner.v1.TransactionSelectorR\x0btransaction\x12\x14\n\x05tabl\
    e\x18\x03\x20\x01(\tR\x05table\x12\x14\n\x05index\x18\x04\x20\x01(\tR\
    \x05index\x12\x18\n\x07columns\x18\x05\x20\x03(\tR\x07columns\x122\n\x07\
    key_set\x18\x06\x20\x01(\x0b2\x19.google.spanner.v1.KeySetR\x06keySet\
    \x12\x14\n\x05limit\x18\x08\x20\x01(\x03R\x05limit\x12!\n\x0cresume_toke\
    n\x18\t\x20\x01(\x0cR\x0bresumeToken\x12'\n\x0fpartition_token\x18\n\x20\
    \x01(\x0cR\x0epartitionToken\"t\n\x17BeginTransactionRequest\x12\x18\n\
    \x07session\x18\x01\x20\x01(\tR\x07session\x12?\n\x07options\x18\x02\x20\
    \x01(\x0b2%.google.spanner.v1.TransactionOptionsR\x07options\"\xfb\x01\n\
    \rCommitRequest\x12\x18\n\x07session\x18\x01\x20\x01(\tR\x07session\x12'\
    \n\x0etransaction_id\x18\x02\x20\x01(\x0cH\0R\rtransactionId\x12]\n\x16s\
    ingle_use_transaction\x18\x03\x20\x01(\x0b2%.google.spanner.v1.Transacti\
    onOptionsH\0R\x14singleUseTransaction\x129\n\tmutations\x18\x04\x20\x03(\
    \x0b2\x1b.google.spanner.v1.MutationR\tmutationsB\r\n\x0btransaction\"W\
    \n\x0eCommitResponse\x12E\n\x10commit_timestamp\x18\x01\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0fcommitTimestamp\"R\n\x0fRollbackReque\
    st\x12\x18\n\x07session\x18\x01\x20\x01(\tR\x07session\x12%\n\x0etransac\
    tion_id\x18\x02\x20\x01(\x0cR\rtransactionId2\x83\x11\n\x07Spanner\x12\
    \x9b\x01\n\rCreateSession\x12'.google.spanner.v1.CreateSessionRequest\
    \x1a\x1a.google.spanner.v1.Session\"E\x82\xd3\xe4\x93\x02?\":/v1/{databa\
    se=projects/*/instances/*/databases/*}/sessions:\x01*\x12\x90\x01\n\nGet\
    Session\x12$.google.spanner.v1.GetSessionRequest\x1a\x1a.google.spanner.\
    v1.Session\"@\x82\xd3\xe4\x93\x02:\x128/v1/{name=projects/*/instances/*/\
    databases/*/sessions/*}\x12\xa3\x01\n\x0cListSessions\x12&.google.spanne\
    r.v1.ListSessionsRequest\x1a'.google.spanner.v1.ListSessionsResponse\"B\
    \x82\xd3\xe4\x93\x02<\x12:/v1/{database=projects/*/instances/*/databases\
    /*}/sessions\x12\x92\x01\n\rDeleteSession\x12'.google.spanner.v1.DeleteS\
    essionRequest\x1a\x16.google.protobuf.Empty\"@\x82\xd3\xe4\x93\x02:*8/v1\
    /{name=projects/*/instances/*/databases/*/sessions/*}\x12\xa3\x01\n\nExe\
    cuteSql\x12$.google.spanner.v1.ExecuteSqlRequest\x1a\x1c.google.spanner.\
    v1.ResultSet\"Q\x82\xd3\xe4\x93\x02K\"F/v1/{session=projects/*/instances\
    /*/databases/*/sessions/*}:executeSql:\x01*\x12\xbe\x01\n\x13ExecuteStre\
    amingSql\x12$.google.spanner.v1.ExecuteSqlRequest\x1a#.google.spanner.v1\
    .PartialResultSet\"Z\x82\xd3\xe4\x93\x02T\"O/v1/{session=projects/*/inst\
    ances/*/databases/*/sessions/*}:executeStreamingSql:\x01*0\x01\x12\x91\
    \x01\n\x04Read\x12\x1e.google.spanner.v1.ReadRequest\x1a\x1c.google.span\
    ner.v1.ResultSet\"K\x82\xd3\xe4\x93\x02E\"@/v1/{session=projects/*/insta\
    nces/*/databases/*/sessions/*}:read:\x01*\x12\xac\x01\n\rStreamingRead\
    \x12\x1e.google.spanner.v1.ReadRequest\x1a#.google.spanner.v1.PartialRes\
    ultSet\"T\x82\xd3\xe4\x93\x02N\"I/v1/{session=projects/*/instances/*/dat\
    abases/*/sessions/*}:streamingRead:\x01*0\x01\x12\xb7\x01\n\x10BeginTran\
    saction\x12*.google.spanner.v1.BeginTransactionRequest\x1a\x1e.google.sp\
    anner.v1.Transaction\"W\x82\xd3\xe4\x93\x02Q\"L/v1/{session=projects/*/i\
    nstances/*/databases/*/sessions/*}:beginTransaction:\x01*\x12\x9c\x01\n\
    \x06Commit\x12\x20.google.spanner.v1.CommitRequest\x1a!.google.spanner.v\
    1.CommitResponse\"M\x82\xd3\xe4\x93\x02G\"B/v1/{session=projects/*/insta\
    nces/*/databases/*/sessions/*}:commit:\x01*\x12\x97\x01\n\x08Rollback\
    \x12\".google.spanner.v1.RollbackRequest\x1a\x16.google.protobuf.Empty\"\
    O\x82\xd3\xe4\x93\x02I\"D/v1/{session=projects/*/instances/*/databases/*\
    /sessions/*}:rollback:\x01*\x12\xb7\x01\n\x0ePartitionQuery\x12(.google.\
    spanner.v1.PartitionQueryRequest\x1a$.google.spanner.v1.PartitionRespons\
    e\"U\x82\xd3\xe4\x93\x02O\"J/v1/{session=projects/*/instances/*/database\
    s/*/sessions/*}:partitionQuery:\x01*\x12\xb4\x01\n\rPartitionRead\x12'.g\
    oogle.spanner.v1.PartitionReadRequest\x1a$.google.spanner.v1.PartitionRe\
    sponse\"T\x82\xd3\xe4\x93\x02N\"I/v1/{session=projects/*/instances/*/dat\
    abases/*/sessions/*}:partitionRead:\x01*B\x95\x01\n\x15com.google.spanne\
    r.v1B\x0cSpannerProtoP\x01Z8google.golang.org/genproto/googleapis/spanne\
    r/v1;spanner\xaa\x02\x17Google.Cloud.Spanner.V1\xca\x02\x17Google\\Cloud\
    \\Spanner\\V1J\xa8\xe5\x01\n\x07\x12\x05\x0e\0\x84\x05\x01\n\xbc\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\x202018\x20Google\x20LL\
    C\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.\
    0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\x19\n\t\n\x02\x03\0\x12\
    \x03\x12\x07%\n\t\n\x02\x03\x01\x12\x03\x13\x07$\n\t\n\x02\x03\x02\x12\
    \x03\x14\x07%\n\t\n\x02\x03\x03\x12\x03\x15\x07(\n\t\n\x02\x03\x04\x12\
    \x03\x16\x07%\n\t\n\x02\x03\x05\x12\x03\x17\x07)\n\t\n\x02\x03\x06\x12\
    \x03\x18\x07+\n\t\n\x02\x03\x07\x12\x03\x19\x07,\n\t\n\x02\x03\x08\x12\
    \x03\x1a\x07%\n\x08\n\x01\x08\x12\x03\x1c\04\n\x0b\n\x04\x08\xe7\x07\0\
    \x12\x03\x1c\04\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x1c\x07\x17\n\r\n\
    \x06\x08\xe7\x07\0\x02\0\x12\x03\x1c\x07\x17\n\x0e\n\x07\x08\xe7\x07\0\
    \x02\0\x01\x12\x03\x1c\x07\x17\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x1c\
    \x1a3\n\x08\n\x01\x08\x12\x03\x1d\0O\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\
    \x1d\0O\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x1d\x07\x11\n\r\n\x06\
    \x08\xe7\x07\x01\x02\0\x12\x03\x1d\x07\x11\n\x0e\n\x07\x08\xe7\x07\x01\
    \x02\0\x01\x12\x03\x1d\x07\x11\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\
    \x1d\x14N\n\x08\n\x01\x08\x12\x03\x1e\0\"\n\x0b\n\x04\x08\xe7\x07\x02\
    \x12\x03\x1e\0\"\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x1e\x07\x1a\n\r\
    \n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x1e\x07\x1a\n\x0e\n\x07\x08\xe7\x07\
    \x02\x02\0\x01\x12\x03\x1e\x07\x1a\n\x0c\n\x05\x08\xe7\x07\x02\x03\x12\
    \x03\x1e\x1d!\n\x08\n\x01\x08\x12\x03\x1f\0-\n\x0b\n\x04\x08\xe7\x07\x03\
    \x12\x03\x1f\0-\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\x1f\x07\x1b\n\r\
    \n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x1f\x07\x1b\n\x0e\n\x07\x08\xe7\x07\
    \x03\x02\0\x01\x12\x03\x1f\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x03\x07\x12\
    \x03\x1f\x1e,\n\x08\n\x01\x08\x12\x03\x20\0.\n\x0b\n\x04\x08\xe7\x07\x04\
    \x12\x03\x20\0.\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x20\x07\x13\n\r\
    \n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x20\x07\x13\n\x0e\n\x07\x08\xe7\x07\
    \x04\x02\0\x01\x12\x03\x20\x07\x13\n\x0c\n\x05\x08\xe7\x07\x04\x07\x12\
    \x03\x20\x16-\n\x08\n\x01\x08\x12\x03!\04\n\x0b\n\x04\x08\xe7\x07\x05\
    \x12\x03!\04\n\x0c\n\x05\x08\xe7\x07\x05\x02\x12\x03!\x07\x14\n\r\n\x06\
    \x08\xe7\x07\x05\x02\0\x12\x03!\x07\x14\n\x0e\n\x07\x08\xe7\x07\x05\x02\
    \0\x01\x12\x03!\x07\x14\n\x0c\n\x05\x08\xe7\x07\x05\x07\x12\x03!\x173\n\
    \x9d\x01\n\x02\x06\0\x12\x05(\0\xe6\x01\x01\x1a\x8f\x01\x20Cloud\x20Span\
    ner\x20API\n\n\x20The\x20Cloud\x20Spanner\x20API\x20can\x20be\x20used\
    \x20to\x20manage\x20sessions\x20and\x20execute\n\x20transactions\x20on\
    \x20data\x20stored\x20in\x20Cloud\x20Spanner\x20databases.\n\n\n\n\x03\
    \x06\0\x01\x12\x03(\x08\x0f\n\x8a\x07\n\x04\x06\0\x02\0\x12\x04<\x02A\
    \x03\x1a\xfb\x06\x20Creates\x20a\x20new\x20session.\x20A\x20session\x20c\
    an\x20be\x20used\x20to\x20perform\n\x20transactions\x20that\x20read\x20a\
    nd/or\x20modify\x20data\x20in\x20a\x20Cloud\x20Spanner\x20database.\n\
    \x20Sessions\x20are\x20meant\x20to\x20be\x20reused\x20for\x20many\x20con\
    secutive\n\x20transactions.\n\n\x20Sessions\x20can\x20only\x20execute\
    \x20one\x20transaction\x20at\x20a\x20time.\x20To\x20execute\n\x20multipl\
    e\x20concurrent\x20read-write/write-only\x20transactions,\x20create\n\
    \x20multiple\x20sessions.\x20Note\x20that\x20standalone\x20reads\x20and\
    \x20queries\x20use\x20a\n\x20transaction\x20internally,\x20and\x20count\
    \x20toward\x20the\x20one\x20transaction\n\x20limit.\n\n\x20Cloud\x20Span\
    ner\x20limits\x20the\x20number\x20of\x20sessions\x20that\x20can\x20exist\
    \x20at\x20any\x20given\n\x20time;\x20thus,\x20it\x20is\x20a\x20good\x20i\
    dea\x20to\x20delete\x20idle\x20and/or\x20unneeded\x20sessions.\n\x20Asid\
    e\x20from\x20explicit\x20deletes,\x20Cloud\x20Spanner\x20can\x20delete\
    \x20sessions\x20for\x20which\x20no\n\x20operations\x20are\x20sent\x20for\
    \x20more\x20than\x20an\x20hour.\x20If\x20a\x20session\x20is\x20deleted,\
    \n\x20requests\x20to\x20it\x20return\x20`NOT_FOUND`.\n\n\x20Idle\x20sess\
    ions\x20can\x20be\x20kept\x20alive\x20by\x20sending\x20a\x20trivial\x20S\
    QL\x20query\n\x20periodically,\x20e.g.,\x20`\"SELECT\x201\"`.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03<\x06\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03<\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03<3:\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x04=\x04@\x06\n\x10\n\x08\x06\0\x02\0\x04\xe7\x07\0\x12\x04=\
    \x04@\x06\n\x10\n\t\x06\0\x02\0\x04\xe7\x07\0\x02\x12\x03=\x0b\x1c\n\x11\
    \n\n\x06\0\x02\0\x04\xe7\x07\0\x02\0\x12\x03=\x0b\x1c\n\x12\n\x0b\x06\0\
    \x02\0\x04\xe7\x07\0\x02\0\x01\x12\x03=\x0c\x1b\n\x11\n\t\x06\0\x02\0\
    \x04\xe7\x07\0\x08\x12\x04=\x1f@\x05\n\x9d\x01\n\x04\x06\0\x02\x01\x12\
    \x04F\x02J\x03\x1a\x8e\x01\x20Gets\x20a\x20session.\x20Returns\x20`NOT_F\
    OUND`\x20if\x20the\x20session\x20does\x20not\x20exist.\n\x20This\x20is\
    \x20mainly\x20useful\x20for\x20determining\x20whether\x20a\x20session\
    \x20is\x20still\n\x20alive.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03F\x06\
    \x10\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03F\x11\"\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03F-4\n\r\n\x05\x06\0\x02\x01\x04\x12\x04G\x04I\x06\n\x10\
    \n\x08\x06\0\x02\x01\x04\xe7\x07\0\x12\x04G\x04I\x06\n\x10\n\t\x06\0\x02\
    \x01\x04\xe7\x07\0\x02\x12\x03G\x0b\x1c\n\x11\n\n\x06\0\x02\x01\x04\xe7\
    \x07\0\x02\0\x12\x03G\x0b\x1c\n\x12\n\x0b\x06\0\x02\x01\x04\xe7\x07\0\
    \x02\0\x01\x12\x03G\x0c\x1b\n\x11\n\t\x06\0\x02\x01\x04\xe7\x07\0\x08\
    \x12\x04G\x1fI\x05\n7\n\x04\x06\0\x02\x02\x12\x04M\x02Q\x03\x1a)\x20List\
    s\x20all\x20sessions\x20in\x20a\x20given\x20database.\n\n\x0c\n\x05\x06\
    \0\x02\x02\x01\x12\x03M\x06\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03M\
    \x13&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03M1E\n\r\n\x05\x06\0\x02\x02\
    \x04\x12\x04N\x04P\x06\n\x10\n\x08\x06\0\x02\x02\x04\xe7\x07\0\x12\x04N\
    \x04P\x06\n\x10\n\t\x06\0\x02\x02\x04\xe7\x07\0\x02\x12\x03N\x0b\x1c\n\
    \x11\n\n\x06\0\x02\x02\x04\xe7\x07\0\x02\0\x12\x03N\x0b\x1c\n\x12\n\x0b\
    \x06\0\x02\x02\x04\xe7\x07\0\x02\0\x01\x12\x03N\x0c\x1b\n\x11\n\t\x06\0\
    \x02\x02\x04\xe7\x07\0\x08\x12\x04N\x1fP\x05\nN\n\x04\x06\0\x02\x03\x12\
    \x04T\x02X\x03\x1a@\x20Ends\x20a\x20session,\x20releasing\x20server\x20r\
    esources\x20associated\x20with\x20it.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03T\x06\x13\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03T\x14(\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03T3H\n\r\n\x05\x06\0\x02\x03\x04\x12\x04U\
    \x04W\x06\n\x10\n\x08\x06\0\x02\x03\x04\xe7\x07\0\x12\x04U\x04W\x06\n\
    \x10\n\t\x06\0\x02\x03\x04\xe7\x07\0\x02\x12\x03U\x0b\x1c\n\x11\n\n\x06\
    \0\x02\x03\x04\xe7\x07\0\x02\0\x12\x03U\x0b\x1c\n\x12\n\x0b\x06\0\x02\
    \x03\x04\xe7\x07\0\x02\0\x01\x12\x03U\x0c\x1b\n\x11\n\t\x06\0\x02\x03\
    \x04\xe7\x07\0\x08\x12\x04U\x1fW\x05\n\xe9\x04\n\x04\x06\0\x02\x04\x12\
    \x04e\x02j\x03\x1a\xda\x04\x20Executes\x20an\x20SQL\x20statement,\x20ret\
    urning\x20all\x20results\x20in\x20a\x20single\x20reply.\x20This\n\x20met\
    hod\x20cannot\x20be\x20used\x20to\x20return\x20a\x20result\x20set\x20lar\
    ger\x20than\x2010\x20MiB;\n\x20if\x20the\x20query\x20yields\x20more\x20d\
    ata\x20than\x20that,\x20the\x20query\x20fails\x20with\n\x20a\x20`FAILED_\
    PRECONDITION`\x20error.\n\n\x20Operations\x20inside\x20read-write\x20tra\
    nsactions\x20might\x20return\x20`ABORTED`.\x20If\n\x20this\x20occurs,\
    \x20the\x20application\x20should\x20restart\x20the\x20transaction\x20fro\
    m\n\x20the\x20beginning.\x20See\x20[Transaction][google.spanner.v1.Trans\
    action]\x20for\x20more\x20details.\n\n\x20Larger\x20result\x20sets\x20ca\
    n\x20be\x20fetched\x20in\x20streaming\x20fashion\x20by\x20calling\n\x20[\
    ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]\x20i\
    nstead.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03e\x06\x10\n\x0c\n\x05\x06\
    \0\x02\x04\x02\x12\x03e\x11\"\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03e-6\n\
    \r\n\x05\x06\0\x02\x04\x04\x12\x04f\x04i\x06\n\x10\n\x08\x06\0\x02\x04\
    \x04\xe7\x07\0\x12\x04f\x04i\x06\n\x10\n\t\x06\0\x02\x04\x04\xe7\x07\0\
    \x02\x12\x03f\x0b\x1c\n\x11\n\n\x06\0\x02\x04\x04\xe7\x07\0\x02\0\x12\
    \x03f\x0b\x1c\n\x12\n\x0b\x06\0\x02\x04\x04\xe7\x07\0\x02\0\x01\x12\x03f\
    \x0c\x1b\n\x11\n\t\x06\0\x02\x04\x04\xe7\x07\0\x08\x12\x04f\x1fi\x05\n\
    \xd5\x02\n\x04\x06\0\x02\x05\x12\x04q\x02v\x03\x1a\xc6\x02\x20Like\x20[E\
    xecuteSql][google.spanner.v1.Spanner.ExecuteSql],\x20except\x20returns\
    \x20the\x20result\n\x20set\x20as\x20a\x20stream.\x20Unlike\x20[ExecuteSq\
    l][google.spanner.v1.Spanner.ExecuteSql],\x20there\n\x20is\x20no\x20limi\
    t\x20on\x20the\x20size\x20of\x20the\x20returned\x20result\x20set.\x20How\
    ever,\x20no\n\x20individual\x20row\x20in\x20the\x20result\x20set\x20can\
    \x20exceed\x20100\x20MiB,\x20and\x20no\n\x20column\x20value\x20can\x20ex\
    ceed\x2010\x20MiB.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03q\x06\x19\n\
    \x0c\n\x05\x06\0\x02\x05\x02\x12\x03q\x1a+\n\x0c\n\x05\x06\0\x02\x05\x06\
    \x12\x03q6<\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03q=M\n\r\n\x05\x06\0\x02\
    \x05\x04\x12\x04r\x04u\x06\n\x10\n\x08\x06\0\x02\x05\x04\xe7\x07\0\x12\
    \x04r\x04u\x06\n\x10\n\t\x06\0\x02\x05\x04\xe7\x07\0\x02\x12\x03r\x0b\
    \x1c\n\x11\n\n\x06\0\x02\x05\x04\xe7\x07\0\x02\0\x12\x03r\x0b\x1c\n\x12\
    \n\x0b\x06\0\x02\x05\x04\xe7\x07\0\x02\0\x01\x12\x03r\x0c\x1b\n\x11\n\t\
    \x06\0\x02\x05\x04\xe7\x07\0\x08\x12\x04r\x1fu\x05\n\xb1\x05\n\x04\x06\0\
    \x02\x06\x12\x06\x85\x01\x02\x8a\x01\x03\x1a\xa0\x05\x20Reads\x20rows\
    \x20from\x20the\x20database\x20using\x20key\x20lookups\x20and\x20scans,\
    \x20as\x20a\n\x20simple\x20key/value\x20style\x20alternative\x20to\n\x20\
    [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].\x20\x20This\x20metho\
    d\x20cannot\x20be\x20used\x20to\n\x20return\x20a\x20result\x20set\x20lar\
    ger\x20than\x2010\x20MiB;\x20if\x20the\x20read\x20matches\x20more\n\x20d\
    ata\x20than\x20that,\x20the\x20read\x20fails\x20with\x20a\x20`FAILED_PRE\
    CONDITION`\n\x20error.\n\n\x20Reads\x20inside\x20read-write\x20transacti\
    ons\x20might\x20return\x20`ABORTED`.\x20If\n\x20this\x20occurs,\x20the\
    \x20application\x20should\x20restart\x20the\x20transaction\x20from\n\x20\
    the\x20beginning.\x20See\x20[Transaction][google.spanner.v1.Transaction]\
    \x20for\x20more\x20details.\n\n\x20Larger\x20result\x20sets\x20can\x20be\
    \x20yielded\x20in\x20streaming\x20fashion\x20by\x20calling\n\x20[Streami\
    ngRead][google.spanner.v1.Spanner.StreamingRead]\x20instead.\n\n\r\n\x05\
    \x06\0\x02\x06\x01\x12\x04\x85\x01\x06\n\n\r\n\x05\x06\0\x02\x06\x02\x12\
    \x04\x85\x01\x0b\x16\n\r\n\x05\x06\0\x02\x06\x03\x12\x04\x85\x01!*\n\x0f\
    \n\x05\x06\0\x02\x06\x04\x12\x06\x86\x01\x04\x89\x01\x06\n\x12\n\x08\x06\
    \0\x02\x06\x04\xe7\x07\0\x12\x06\x86\x01\x04\x89\x01\x06\n\x11\n\t\x06\0\
    \x02\x06\x04\xe7\x07\0\x02\x12\x04\x86\x01\x0b\x1c\n\x12\n\n\x06\0\x02\
    \x06\x04\xe7\x07\0\x02\0\x12\x04\x86\x01\x0b\x1c\n\x13\n\x0b\x06\0\x02\
    \x06\x04\xe7\x07\0\x02\0\x01\x12\x04\x86\x01\x0c\x1b\n\x13\n\t\x06\0\x02\
    \x06\x04\xe7\x07\0\x08\x12\x06\x86\x01\x1f\x89\x01\x05\n\xbf\x02\n\x04\
    \x06\0\x02\x07\x12\x06\x91\x01\x02\x96\x01\x03\x1a\xae\x02\x20Like\x20[R\
    ead][google.spanner.v1.Spanner.Read],\x20except\x20returns\x20the\x20res\
    ult\x20set\x20as\x20a\n\x20stream.\x20Unlike\x20[Read][google.spanner.v1\
    .Spanner.Read],\x20there\x20is\x20no\x20limit\x20on\x20the\n\x20size\x20\
    of\x20the\x20returned\x20result\x20set.\x20However,\x20no\x20individual\
    \x20row\x20in\n\x20the\x20result\x20set\x20can\x20exceed\x20100\x20MiB,\
    \x20and\x20no\x20column\x20value\x20can\x20exceed\n\x2010\x20MiB.\n\n\r\
    \n\x05\x06\0\x02\x07\x01\x12\x04\x91\x01\x06\x13\n\r\n\x05\x06\0\x02\x07\
    \x02\x12\x04\x91\x01\x14\x1f\n\r\n\x05\x06\0\x02\x07\x06\x12\x04\x91\x01\
    *0\n\r\n\x05\x06\0\x02\x07\x03\x12\x04\x91\x011A\n\x0f\n\x05\x06\0\x02\
    \x07\x04\x12\x06\x92\x01\x04\x95\x01\x06\n\x12\n\x08\x06\0\x02\x07\x04\
    \xe7\x07\0\x12\x06\x92\x01\x04\x95\x01\x06\n\x11\n\t\x06\0\x02\x07\x04\
    \xe7\x07\0\x02\x12\x04\x92\x01\x0b\x1c\n\x12\n\n\x06\0\x02\x07\x04\xe7\
    \x07\0\x02\0\x12\x04\x92\x01\x0b\x1c\n\x13\n\x0b\x06\0\x02\x07\x04\xe7\
    \x07\0\x02\0\x01\x12\x04\x92\x01\x0c\x1b\n\x13\n\t\x06\0\x02\x07\x04\xe7\
    \x07\0\x08\x12\x06\x92\x01\x1f\x95\x01\x05\n\x87\x02\n\x04\x06\0\x02\x08\
    \x12\x06\x9c\x01\x02\xa1\x01\x03\x1a\xf6\x01\x20Begins\x20a\x20new\x20tr\
    ansaction.\x20This\x20step\x20can\x20often\x20be\x20skipped:\n\x20[Read]\
    [google.spanner.v1.Spanner.Read],\x20[ExecuteSql][google.spanner.v1.Span\
    ner.ExecuteSql]\x20and\n\x20[Commit][google.spanner.v1.Spanner.Commit]\
    \x20can\x20begin\x20a\x20new\x20transaction\x20as\x20a\n\x20side-effect.\
    \n\n\r\n\x05\x06\0\x02\x08\x01\x12\x04\x9c\x01\x06\x16\n\r\n\x05\x06\0\
    \x02\x08\x02\x12\x04\x9c\x01\x17.\n\r\n\x05\x06\0\x02\x08\x03\x12\x04\
    \x9c\x019D\n\x0f\n\x05\x06\0\x02\x08\x04\x12\x06\x9d\x01\x04\xa0\x01\x06\
    \n\x12\n\x08\x06\0\x02\x08\x04\xe7\x07\0\x12\x06\x9d\x01\x04\xa0\x01\x06\
    \n\x11\n\t\x06\0\x02\x08\x04\xe7\x07\0\x02\x12\x04\x9d\x01\x0b\x1c\n\x12\
    \n\n\x06\0\x02\x08\x04\xe7\x07\0\x02\0\x12\x04\x9d\x01\x0b\x1c\n\x13\n\
    \x0b\x06\0\x02\x08\x04\xe7\x07\0\x02\0\x01\x12\x04\x9d\x01\x0c\x1b\n\x13\
    \n\t\x06\0\x02\x08\x04\xe7\x07\0\x08\x12\x06\x9d\x01\x1f\xa0\x01\x05\n\
    \xb6\x03\n\x04\x06\0\x02\t\x12\x06\xab\x01\x02\xb0\x01\x03\x1a\xa5\x03\
    \x20Commits\x20a\x20transaction.\x20The\x20request\x20includes\x20the\
    \x20mutations\x20to\x20be\n\x20applied\x20to\x20rows\x20in\x20the\x20dat\
    abase.\n\n\x20`Commit`\x20might\x20return\x20an\x20`ABORTED`\x20error.\
    \x20This\x20can\x20occur\x20at\x20any\x20time;\n\x20commonly,\x20the\x20\
    cause\x20is\x20conflicts\x20with\x20concurrent\n\x20transactions.\x20How\
    ever,\x20it\x20can\x20also\x20happen\x20for\x20a\x20variety\x20of\x20oth\
    er\n\x20reasons.\x20If\x20`Commit`\x20returns\x20`ABORTED`,\x20the\x20ca\
    ller\x20should\x20re-attempt\n\x20the\x20transaction\x20from\x20the\x20b\
    eginning,\x20re-using\x20the\x20same\x20session.\n\n\r\n\x05\x06\0\x02\t\
    \x01\x12\x04\xab\x01\x06\x0c\n\r\n\x05\x06\0\x02\t\x02\x12\x04\xab\x01\r\
    \x1a\n\r\n\x05\x06\0\x02\t\x03\x12\x04\xab\x01%3\n\x0f\n\x05\x06\0\x02\t\
    \x04\x12\x06\xac\x01\x04\xaf\x01\x06\n\x12\n\x08\x06\0\x02\t\x04\xe7\x07\
    \0\x12\x06\xac\x01\x04\xaf\x01\x06\n\x11\n\t\x06\0\x02\t\x04\xe7\x07\0\
    \x02\x12\x04\xac\x01\x0b\x1c\n\x12\n\n\x06\0\x02\t\x04\xe7\x07\0\x02\0\
    \x12\x04\xac\x01\x0b\x1c\n\x13\n\x0b\x06\0\x02\t\x04\xe7\x07\0\x02\0\x01\
    \x12\x04\xac\x01\x0c\x1b\n\x13\n\t\x06\0\x02\t\x04\xe7\x07\0\x08\x12\x06\
    \xac\x01\x1f\xaf\x01\x05\n\xd7\x03\n\x04\x06\0\x02\n\x12\x06\xba\x01\x02\
    \xbf\x01\x03\x1a\xc6\x03\x20Rolls\x20back\x20a\x20transaction,\x20releas\
    ing\x20any\x20locks\x20it\x20holds.\x20It\x20is\x20a\x20good\n\x20idea\
    \x20to\x20call\x20this\x20for\x20any\x20transaction\x20that\x20includes\
    \x20one\x20or\x20more\n\x20[Read][google.spanner.v1.Spanner.Read]\x20or\
    \x20[ExecuteSql][google.spanner.v1.Spanner.ExecuteSql]\x20requests\x20an\
    d\n\x20ultimately\x20decides\x20not\x20to\x20commit.\n\n\x20`Rollback`\
    \x20returns\x20`OK`\x20if\x20it\x20successfully\x20aborts\x20the\x20tran\
    saction,\x20the\n\x20transaction\x20was\x20already\x20aborted,\x20or\x20\
    the\x20transaction\x20is\x20not\n\x20found.\x20`Rollback`\x20never\x20re\
    turns\x20`ABORTED`.\n\n\r\n\x05\x06\0\x02\n\x01\x12\x04\xba\x01\x06\x0e\
    \n\r\n\x05\x06\0\x02\n\x02\x12\x04\xba\x01\x0f\x1e\n\r\n\x05\x06\0\x02\n\
    \x03\x12\x04\xba\x01)>\n\x0f\n\x05\x06\0\x02\n\x04\x12\x06\xbb\x01\x04\
    \xbe\x01\x06\n\x12\n\x08\x06\0\x02\n\x04\xe7\x07\0\x12\x06\xbb\x01\x04\
    \xbe\x01\x06\n\x11\n\t\x06\0\x02\n\x04\xe7\x07\0\x02\x12\x04\xbb\x01\x0b\
    \x1c\n\x12\n\n\x06\0\x02\n\x04\xe7\x07\0\x02\0\x12\x04\xbb\x01\x0b\x1c\n\
    \x13\n\x0b\x06\0\x02\n\x04\xe7\x07\0\x02\0\x01\x12\x04\xbb\x01\x0c\x1b\n\
    \x13\n\t\x06\0\x02\n\x04\xe7\x07\0\x08\x12\x06\xbb\x01\x1f\xbe\x01\x05\n\
    \xef\x05\n\x04\x06\0\x02\x0b\x12\x06\xcc\x01\x02\xd1\x01\x03\x1a\xde\x05\
    \x20Creates\x20a\x20set\x20of\x20partition\x20tokens\x20that\x20can\x20b\
    e\x20used\x20to\x20execute\x20a\x20query\n\x20operation\x20in\x20paralle\
    l.\x20\x20Each\x20of\x20the\x20returned\x20partition\x20tokens\x20can\
    \x20be\x20used\n\x20by\x20[ExecuteStreamingSql][google.spanner.v1.Spanne\
    r.ExecuteStreamingSql]\x20to\x20specify\x20a\x20subset\n\x20of\x20the\
    \x20query\x20result\x20to\x20read.\x20\x20The\x20same\x20session\x20and\
    \x20read-only\x20transaction\n\x20must\x20be\x20used\x20by\x20the\x20Par\
    titionQueryRequest\x20used\x20to\x20create\x20the\n\x20partition\x20toke\
    ns\x20and\x20the\x20ExecuteSqlRequests\x20that\x20use\x20the\x20partitio\
    n\x20tokens.\n\n\x20Partition\x20tokens\x20become\x20invalid\x20when\x20\
    the\x20session\x20used\x20to\x20create\x20them\n\x20is\x20deleted,\x20is\
    \x20idle\x20for\x20too\x20long,\x20begins\x20a\x20new\x20transaction,\
    \x20or\x20becomes\x20too\n\x20old.\x20\x20When\x20any\x20of\x20these\x20\
    happen,\x20it\x20is\x20not\x20possible\x20to\x20resume\x20the\x20query,\
    \x20and\n\x20the\x20whole\x20operation\x20must\x20be\x20restarted\x20fro\
    m\x20the\x20beginning.\n\n\r\n\x05\x06\0\x02\x0b\x01\x12\x04\xcc\x01\x06\
    \x14\n\r\n\x05\x06\0\x02\x0b\x02\x12\x04\xcc\x01\x15*\n\r\n\x05\x06\0\
    \x02\x0b\x03\x12\x04\xcc\x015F\n\x0f\n\x05\x06\0\x02\x0b\x04\x12\x06\xcd\
    \x01\x04\xd0\x01\x06\n\x12\n\x08\x06\0\x02\x0b\x04\xe7\x07\0\x12\x06\xcd\
    \x01\x04\xd0\x01\x06\n\x11\n\t\x06\0\x02\x0b\x04\xe7\x07\0\x02\x12\x04\
    \xcd\x01\x0b\x1c\n\x12\n\n\x06\0\x02\x0b\x04\xe7\x07\0\x02\0\x12\x04\xcd\
    \x01\x0b\x1c\n\x13\n\x0b\x06\0\x02\x0b\x04\xe7\x07\0\x02\0\x01\x12\x04\
    \xcd\x01\x0c\x1b\n\x13\n\t\x06\0\x02\x0b\x04\xe7\x07\0\x08\x12\x06\xcd\
    \x01\x1f\xd0\x01\x05\n\x84\x07\n\x04\x06\0\x02\x0c\x12\x06\xe0\x01\x02\
    \xe5\x01\x03\x1a\xf3\x06\x20Creates\x20a\x20set\x20of\x20partition\x20to\
    kens\x20that\x20can\x20be\x20used\x20to\x20execute\x20a\x20read\n\x20ope\
    ration\x20in\x20parallel.\x20\x20Each\x20of\x20the\x20returned\x20partit\
    ion\x20tokens\x20can\x20be\x20used\n\x20by\x20[StreamingRead][google.spa\
    nner.v1.Spanner.StreamingRead]\x20to\x20specify\x20a\x20subset\x20of\x20\
    the\x20read\n\x20result\x20to\x20read.\x20\x20The\x20same\x20session\x20\
    and\x20read-only\x20transaction\x20must\x20be\x20used\x20by\n\x20the\x20\
    PartitionReadRequest\x20used\x20to\x20create\x20the\x20partition\x20toke\
    ns\x20and\x20the\n\x20ReadRequests\x20that\x20use\x20the\x20partition\
    \x20tokens.\x20\x20There\x20are\x20no\x20ordering\n\x20guarantees\x20on\
    \x20rows\x20returned\x20among\x20the\x20returned\x20partition\x20tokens,\
    \x20or\x20even\n\x20within\x20each\x20individual\x20StreamingRead\x20cal\
    l\x20issued\x20with\x20a\x20partition_token.\n\n\x20Partition\x20tokens\
    \x20become\x20invalid\x20when\x20the\x20session\x20used\x20to\x20create\
    \x20them\n\x20is\x20deleted,\x20is\x20idle\x20for\x20too\x20long,\x20beg\
    ins\x20a\x20new\x20transaction,\x20or\x20becomes\x20too\n\x20old.\x20\
    \x20When\x20any\x20of\x20these\x20happen,\x20it\x20is\x20not\x20possible\
    \x20to\x20resume\x20the\x20read,\x20and\n\x20the\x20whole\x20operation\
    \x20must\x20be\x20restarted\x20from\x20the\x20beginning.\n\n\r\n\x05\x06\
    \0\x02\x0c\x01\x12\x04\xe0\x01\x06\x13\n\r\n\x05\x06\0\x02\x0c\x02\x12\
    \x04\xe0\x01\x14(\n\r\n\x05\x06\0\x02\x0c\x03\x12\x04\xe0\x013D\n\x0f\n\
    \x05\x06\0\x02\x0c\x04\x12\x06\xe1\x01\x04\xe4\x01\x06\n\x12\n\x08\x06\0\
    \x02\x0c\x04\xe7\x07\0\x12\x06\xe1\x01\x04\xe4\x01\x06\n\x11\n\t\x06\0\
    \x02\x0c\x04\xe7\x07\0\x02\x12\x04\xe1\x01\x0b\x1c\n\x12\n\n\x06\0\x02\
    \x0c\x04\xe7\x07\0\x02\0\x12\x04\xe1\x01\x0b\x1c\n\x13\n\x0b\x06\0\x02\
    \x0c\x04\xe7\x07\0\x02\0\x01\x12\x04\xe1\x01\x0c\x1b\n\x13\n\t\x06\0\x02\
    \x0c\x04\xe7\x07\0\x08\x12\x06\xe1\x01\x1f\xe4\x01\x05\nY\n\x02\x04\0\
    \x12\x06\xe9\x01\0\xef\x01\x01\x1aK\x20The\x20request\x20for\x20[CreateS\
    ession][google.spanner.v1.Spanner.CreateSession].\n\n\x0b\n\x03\x04\0\
    \x01\x12\x04\xe9\x01\x08\x1c\nK\n\x04\x04\0\x02\0\x12\x04\xeb\x01\x02\
    \x16\x1a=\x20Required.\x20The\x20database\x20in\x20which\x20the\x20new\
    \x20session\x20is\x20created.\n\n\x0f\n\x05\x04\0\x02\0\x04\x12\x06\xeb\
    \x01\x02\xe9\x01\x1e\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xeb\x01\x02\x08\n\
    \r\n\x05\x04\0\x02\0\x01\x12\x04\xeb\x01\t\x11\n\r\n\x05\x04\0\x02\0\x03\
    \x12\x04\xeb\x01\x14\x15\n&\n\x04\x04\0\x02\x01\x12\x04\xee\x01\x02\x16\
    \x1a\x18\x20The\x20session\x20to\x20create.\n\n\x0f\n\x05\x04\0\x02\x01\
    \x04\x12\x06\xee\x01\x02\xeb\x01\x16\n\r\n\x05\x04\0\x02\x01\x06\x12\x04\
    \xee\x01\x02\t\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xee\x01\n\x11\n\r\n\
    \x05\x04\0\x02\x01\x03\x12\x04\xee\x01\x14\x15\n3\n\x02\x04\x01\x12\x06\
    \xf2\x01\0\x88\x02\x01\x1a%\x20A\x20session\x20in\x20the\x20Cloud\x20Spa\
    nner\x20API.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xf2\x01\x08\x0f\n~\n\x04\
    \x04\x01\x02\0\x12\x04\xf5\x01\x02\x12\x1ap\x20The\x20name\x20of\x20the\
    \x20session.\x20This\x20is\x20always\x20system-assigned;\x20values\x20pr\
    ovided\n\x20when\x20creating\x20a\x20session\x20are\x20ignored.\n\n\x0f\
    \n\x05\x04\x01\x02\0\x04\x12\x06\xf5\x01\x02\xf2\x01\x11\n\r\n\x05\x04\
    \x01\x02\0\x05\x12\x04\xf5\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\
    \x04\xf5\x01\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xf5\x01\x10\x11\n\
    \xd6\x03\n\x04\x04\x01\x02\x01\x12\x04\x80\x02\x02!\x1a\xc7\x03\x20The\
    \x20labels\x20for\x20the\x20session.\n\n\x20\x20*\x20Label\x20keys\x20mu\
    st\x20be\x20between\x201\x20and\x2063\x20characters\x20long\x20and\x20mu\
    st\x20conform\x20to\n\x20\x20\x20\x20the\x20following\x20regular\x20expr\
    ession:\x20`[a-z]([-a-z0-9]*[a-z0-9])?`.\n\x20\x20*\x20Label\x20values\
    \x20must\x20be\x20between\x200\x20and\x2063\x20characters\x20long\x20and\
    \x20must\x20conform\n\x20\x20\x20\x20to\x20the\x20regular\x20expression\
    \x20`([a-z]([-a-z0-9]*[a-z0-9])?)?`.\n\x20\x20*\x20No\x20more\x20than\
    \x2064\x20labels\x20can\x20be\x20associated\x20with\x20a\x20given\x20ses\
    sion.\n\n\x20See\x20https://goo.gl/xmQnxf\x20for\x20more\x20information\
    \x20on\x20and\x20examples\x20of\x20labels.\n\n\x0f\n\x05\x04\x01\x02\x01\
    \x04\x12\x06\x80\x02\x02\xf5\x01\x12\n\r\n\x05\x04\x01\x02\x01\x06\x12\
    \x04\x80\x02\x02\x15\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\x80\x02\x16\
    \x1c\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x80\x02\x1f\x20\nG\n\x04\x04\
    \x01\x02\x02\x12\x04\x83\x02\x02,\x1a9\x20Output\x20only.\x20The\x20time\
    stamp\x20when\x20the\x20session\x20is\x20created.\n\n\x0f\n\x05\x04\x01\
    \x02\x02\x04\x12\x06\x83\x02\x02\x80\x02!\n\r\n\x05\x04\x01\x02\x02\x06\
    \x12\x04\x83\x02\x02\x1b\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\x83\x02\
    \x1c'\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\x83\x02*+\n\x8d\x01\n\x04\
    \x04\x01\x02\x03\x12\x04\x87\x02\x02:\x1a\x7f\x20Output\x20only.\x20The\
    \x20approximate\x20timestamp\x20when\x20the\x20session\x20is\x20last\x20\
    used.\x20It\x20is\n\x20typically\x20earlier\x20than\x20the\x20actual\x20\
    last\x20use\x20time.\n\n\x0f\n\x05\x04\x01\x02\x03\x04\x12\x06\x87\x02\
    \x02\x83\x02,\n\r\n\x05\x04\x01\x02\x03\x06\x12\x04\x87\x02\x02\x1b\n\r\
    \n\x05\x04\x01\x02\x03\x01\x12\x04\x87\x02\x1c5\n\r\n\x05\x04\x01\x02\
    \x03\x03\x12\x04\x87\x0289\nS\n\x02\x04\x02\x12\x06\x8b\x02\0\x8e\x02\
    \x01\x1aE\x20The\x20request\x20for\x20[GetSession][google.spanner.v1.Spa\
    nner.GetSession].\n\n\x0b\n\x03\x04\x02\x01\x12\x04\x8b\x02\x08\x19\n>\n\
    \x04\x04\x02\x02\0\x12\x04\x8d\x02\x02\x12\x1a0\x20Required.\x20The\x20n\
    ame\x20of\x20the\x20session\x20to\x20retrieve.\n\n\x0f\n\x05\x04\x02\x02\
    \0\x04\x12\x06\x8d\x02\x02\x8b\x02\x1b\n\r\n\x05\x04\x02\x02\0\x05\x12\
    \x04\x8d\x02\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x8d\x02\t\r\n\r\
    \n\x05\x04\x02\x02\0\x03\x12\x04\x8d\x02\x10\x11\nW\n\x02\x04\x03\x12\
    \x06\x91\x02\0\xa9\x02\x01\x1aI\x20The\x20request\x20for\x20[ListSession\
    s][google.spanner.v1.Spanner.ListSessions].\n\n\x0b\n\x03\x04\x03\x01\
    \x12\x04\x91\x02\x08\x1b\nA\n\x04\x04\x03\x02\0\x12\x04\x93\x02\x02\x16\
    \x1a3\x20Required.\x20The\x20database\x20in\x20which\x20to\x20list\x20se\
    ssions.\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\x93\x02\x02\x91\x02\x1d\
    \n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x93\x02\x02\x08\n\r\n\x05\x04\x03\
    \x02\0\x01\x12\x04\x93\x02\t\x11\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x93\
    \x02\x14\x15\n\x85\x01\n\x04\x04\x03\x02\x01\x12\x04\x97\x02\x02\x16\x1a\
    w\x20Number\x20of\x20sessions\x20to\x20be\x20returned\x20in\x20the\x20re\
    sponse.\x20If\x200\x20or\x20less,\x20defaults\n\x20to\x20the\x20server's\
    \x20maximum\x20allowed\x20page\x20size.\n\n\x0f\n\x05\x04\x03\x02\x01\
    \x04\x12\x06\x97\x02\x02\x93\x02\x16\n\r\n\x05\x04\x03\x02\x01\x05\x12\
    \x04\x97\x02\x02\x07\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x97\x02\x08\
    \x11\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\x97\x02\x14\x15\n\xd8\x01\n\
    \x04\x04\x03\x02\x02\x12\x04\x9c\x02\x02\x18\x1a\xc9\x01\x20If\x20non-em\
    pty,\x20`page_token`\x20should\x20contain\x20a\n\x20[next_page_token][go\
    ogle.spanner.v1.ListSessionsResponse.next_page_token]\x20from\x20a\x20pr\
    evious\n\x20[ListSessionsResponse][google.spanner.v1.ListSessionsRespons\
    e].\n\n\x0f\n\x05\x04\x03\x02\x02\x04\x12\x06\x9c\x02\x02\x97\x02\x16\n\
    \r\n\x05\x04\x03\x02\x02\x05\x12\x04\x9c\x02\x02\x08\n\r\n\x05\x04\x03\
    \x02\x02\x01\x12\x04\x9c\x02\t\x13\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\
    \x9c\x02\x16\x17\n\xaf\x03\n\x04\x04\x03\x02\x03\x12\x04\xa8\x02\x02\x14\
    \x1a\xa0\x03\x20An\x20expression\x20for\x20filtering\x20the\x20results\
    \x20of\x20the\x20request.\x20Filter\x20rules\x20are\n\x20case\x20insensi\
    tive.\x20The\x20fields\x20eligible\x20for\x20filtering\x20are:\n\n\x20\
    \x20\x20*\x20`labels.key`\x20where\x20key\x20is\x20the\x20name\x20of\x20\
    a\x20label\n\n\x20Some\x20examples\x20of\x20using\x20filters\x20are:\n\n\
    \x20\x20\x20*\x20`labels.env:*`\x20-->\x20The\x20session\x20has\x20the\
    \x20label\x20\"env\".\n\x20\x20\x20*\x20`labels.env:dev`\x20-->\x20The\
    \x20session\x20has\x20the\x20label\x20\"env\"\x20and\x20the\x20value\x20\
    of\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20the\x20label\x20contains\x20the\x20string\
    \x20\"dev\".\n\n\x0f\n\x05\x04\x03\x02\x03\x04\x12\x06\xa8\x02\x02\x9c\
    \x02\x18\n\r\n\x05\x04\x03\x02\x03\x05\x12\x04\xa8\x02\x02\x08\n\r\n\x05\
    \x04\x03\x02\x03\x01\x12\x04\xa8\x02\t\x0f\n\r\n\x05\x04\x03\x02\x03\x03\
    \x12\x04\xa8\x02\x12\x13\nX\n\x02\x04\x04\x12\x06\xac\x02\0\xb4\x02\x01\
    \x1aJ\x20The\x20response\x20for\x20[ListSessions][google.spanner.v1.Span\
    ner.ListSessions].\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xac\x02\x08\x1c\n/\
    \n\x04\x04\x04\x02\0\x12\x04\xae\x02\x02\x20\x1a!\x20The\x20list\x20of\
    \x20requested\x20sessions.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\xae\x02\
    \x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xae\x02\x0b\x12\n\r\n\x05\x04\
    \x04\x02\0\x01\x12\x04\xae\x02\x13\x1b\n\r\n\x05\x04\x04\x02\0\x03\x12\
    \x04\xae\x02\x1e\x1f\n\xa4\x01\n\x04\x04\x04\x02\x01\x12\x04\xb3\x02\x02\
    \x1d\x1a\x95\x01\x20`next_page_token`\x20can\x20be\x20sent\x20in\x20a\
    \x20subsequent\n\x20[ListSessions][google.spanner.v1.Spanner.ListSession\
    s]\x20call\x20to\x20fetch\x20more\x20of\x20the\x20matching\n\x20sessions\
    .\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\xb3\x02\x02\xae\x02\x20\n\r\
    \n\x05\x04\x04\x02\x01\x05\x12\x04\xb3\x02\x02\x08\n\r\n\x05\x04\x04\x02\
    \x01\x01\x12\x04\xb3\x02\t\x18\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xb3\
    \x02\x1b\x1c\nY\n\x02\x04\x05\x12\x06\xb7\x02\0\xba\x02\x01\x1aK\x20The\
    \x20request\x20for\x20[DeleteSession][google.spanner.v1.Spanner.DeleteSe\
    ssion].\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xb7\x02\x08\x1c\n<\n\x04\x04\
    \x05\x02\0\x12\x04\xb9\x02\x02\x12\x1a.\x20Required.\x20The\x20name\x20o\
    f\x20the\x20session\x20to\x20delete.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\
    \x06\xb9\x02\x02\xb7\x02\x1e\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xb9\x02\
    \x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xb9\x02\t\r\n\r\n\x05\x04\
    \x05\x02\0\x03\x12\x04\xb9\x02\x10\x11\n\x9e\x01\n\x02\x04\x06\x12\x06\
    \xbe\x02\0\x9a\x03\x01\x1a\x8f\x01\x20The\x20request\x20for\x20[ExecuteS\
    ql][google.spanner.v1.Spanner.ExecuteSql]\x20and\n\x20[ExecuteStreamingS\
    ql][google.spanner.v1.Spanner.ExecuteStreamingSql].\n\n\x0b\n\x03\x04\
    \x06\x01\x12\x04\xbe\x02\x08\x19\n@\n\x04\x04\x06\x04\0\x12\x06\xc0\x02\
    \x02\xcb\x02\x03\x1a0\x20Mode\x20in\x20which\x20the\x20statement\x20must\
    \x20be\x20processed.\n\n\r\n\x05\x04\x06\x04\0\x01\x12\x04\xc0\x02\x07\
    \x10\nL\n\x06\x04\x06\x04\0\x02\0\x12\x04\xc2\x02\x04\x0f\x1a<\x20The\
    \x20default\x20mode.\x20Only\x20the\x20statement\x20results\x20are\x20re\
    turned.\n\n\x0f\n\x07\x04\x06\x04\0\x02\0\x01\x12\x04\xc2\x02\x04\n\n\
    \x0f\n\x07\x04\x06\x04\0\x02\0\x02\x12\x04\xc2\x02\r\x0e\nr\n\x06\x04\
    \x06\x04\0\x02\x01\x12\x04\xc6\x02\x04\r\x1ab\x20This\x20mode\x20returns\
    \x20only\x20the\x20query\x20plan,\x20without\x20any\x20results\x20or\n\
    \x20execution\x20statistics\x20information.\n\n\x0f\n\x07\x04\x06\x04\0\
    \x02\x01\x01\x12\x04\xc6\x02\x04\x08\n\x0f\n\x07\x04\x06\x04\0\x02\x01\
    \x02\x12\x04\xc6\x02\x0b\x0c\nm\n\x06\x04\x06\x04\0\x02\x02\x12\x04\xca\
    \x02\x04\x10\x1a]\x20This\x20mode\x20returns\x20both\x20the\x20query\x20\
    plan\x20and\x20the\x20execution\x20statistics\x20along\n\x20with\x20the\
    \x20results.\n\n\x0f\n\x07\x04\x06\x04\0\x02\x02\x01\x12\x04\xca\x02\x04\
    \x0b\n\x0f\n\x07\x04\x06\x04\0\x02\x02\x02\x12\x04\xca\x02\x0e\x0f\nQ\n\
    \x04\x04\x06\x02\0\x12\x04\xce\x02\x02\x15\x1aC\x20Required.\x20The\x20s\
    ession\x20in\x20which\x20the\x20SQL\x20query\x20should\x20be\x20performe\
    d.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\xce\x02\x02\xcb\x02\x03\n\r\n\
    \x05\x04\x06\x02\0\x05\x12\x04\xce\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\
    \x01\x12\x04\xce\x02\t\x10\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xce\x02\
    \x13\x14\n\xa7\x04\n\x04\x04\x06\x02\x01\x12\x04\xdd\x02\x02&\x1a\x98\
    \x04\x20The\x20transaction\x20to\x20use.\x20If\x20none\x20is\x20provided\
    ,\x20the\x20default\x20is\x20a\n\x20temporary\x20read-only\x20transactio\
    n\x20with\x20strong\x20concurrency.\n\n\x20The\x20transaction\x20to\x20u\
    se.\n\n\x20For\x20queries,\x20if\x20none\x20is\x20provided,\x20the\x20de\
    fault\x20is\x20a\x20temporary\x20read-only\n\x20transaction\x20with\x20s\
    trong\x20concurrency.\n\n\x20Standard\x20DML\x20statements\x20require\
    \x20a\x20ReadWrite\x20transaction.\x20Single-use\n\x20transactions\x20ar\
    e\x20not\x20supported\x20(to\x20avoid\x20replay).\x20\x20The\x20caller\
    \x20must\n\x20either\x20supply\x20an\x20existing\x20transaction\x20ID\
    \x20or\x20begin\x20a\x20new\x20transaction.\n\n\x20Partitioned\x20DML\
    \x20requires\x20an\x20existing\x20PartitionedDml\x20transaction\x20ID.\n\
    \n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\xdd\x02\x02\xce\x02\x15\n\r\n\
    \x05\x04\x06\x02\x01\x06\x12\x04\xdd\x02\x02\x15\n\r\n\x05\x04\x06\x02\
    \x01\x01\x12\x04\xdd\x02\x16!\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xdd\
    \x02$%\n)\n\x04\x04\x06\x02\x02\x12\x04\xe0\x02\x02\x11\x1a\x1b\x20Requi\
    red.\x20The\x20SQL\x20string.\n\n\x0f\n\x05\x04\x06\x02\x02\x04\x12\x06\
    \xe0\x02\x02\xdd\x02&\n\r\n\x05\x04\x06\x02\x02\x05\x12\x04\xe0\x02\x02\
    \x08\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xe0\x02\t\x0c\n\r\n\x05\x04\
    \x06\x02\x02\x03\x12\x04\xe0\x02\x0f\x10\n\x81\x05\n\x04\x04\x06\x02\x03\
    \x12\x04\xf0\x02\x02$\x1a\xf2\x04\x20The\x20SQL\x20string\x20can\x20cont\
    ain\x20parameter\x20placeholders.\x20A\x20parameter\n\x20placeholder\x20\
    consists\x20of\x20`'@'`\x20followed\x20by\x20the\x20parameter\n\x20name.\
    \x20Parameter\x20names\x20consist\x20of\x20any\x20combination\x20of\x20l\
    etters,\n\x20numbers,\x20and\x20underscores.\n\n\x20Parameters\x20can\
    \x20appear\x20anywhere\x20that\x20a\x20literal\x20value\x20is\x20expecte\
    d.\x20\x20The\x20same\n\x20parameter\x20name\x20can\x20be\x20used\x20mor\
    e\x20than\x20once,\x20for\x20example:\n\x20\x20\x20`\"WHERE\x20id\x20>\
    \x20@msg_id\x20AND\x20id\x20<\x20@msg_id\x20+\x20100\"`\n\n\x20It\x20is\
    \x20an\x20error\x20to\x20execute\x20an\x20SQL\x20statement\x20with\x20un\
    bound\x20parameters.\n\n\x20Parameter\x20values\x20are\x20specified\x20u\
    sing\x20`params`,\x20which\x20is\x20a\x20JSON\n\x20object\x20whose\x20ke\
    ys\x20are\x20parameter\x20names,\x20and\x20whose\x20values\x20are\x20the\
    \n\x20corresponding\x20parameter\x20values.\n\n\x0f\n\x05\x04\x06\x02\
    \x03\x04\x12\x06\xf0\x02\x02\xe0\x02\x11\n\r\n\x05\x04\x06\x02\x03\x06\
    \x12\x04\xf0\x02\x02\x18\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\xf0\x02\
    \x19\x1f\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\xf0\x02\"#\n\xdc\x03\n\
    \x04\x04\x06\x02\x04\x12\x04\xfa\x02\x02$\x1a\xcd\x03\x20It\x20is\x20not\
    \x20always\x20possible\x20for\x20Cloud\x20Spanner\x20to\x20infer\x20the\
    \x20right\x20SQL\x20type\n\x20from\x20a\x20JSON\x20value.\x20\x20For\x20\
    example,\x20values\x20of\x20type\x20`BYTES`\x20and\x20values\n\x20of\x20\
    type\x20`STRING`\x20both\x20appear\x20in\x20[params][google.spanner.v1.E\
    xecuteSqlRequest.params]\x20as\x20JSON\x20strings.\n\n\x20In\x20these\
    \x20cases,\x20`param_types`\x20can\x20be\x20used\x20to\x20specify\x20the\
    \x20exact\n\x20SQL\x20type\x20for\x20some\x20or\x20all\x20of\x20the\x20S\
    QL\x20statement\x20parameters.\x20See\x20the\n\x20definition\x20of\x20[T\
    ype][google.spanner.v1.Type]\x20for\x20more\x20information\n\x20about\
    \x20SQL\x20types.\n\n\x0f\n\x05\x04\x06\x02\x04\x04\x12\x06\xfa\x02\x02\
    \xf0\x02$\n\r\n\x05\x04\x06\x02\x04\x06\x12\x04\xfa\x02\x02\x13\n\r\n\
    \x05\x04\x06\x02\x04\x01\x12\x04\xfa\x02\x14\x1f\n\r\n\x05\x04\x06\x02\
    \x04\x03\x12\x04\xfa\x02\"#\n\x9e\x03\n\x04\x04\x06\x02\x05\x12\x04\x82\
    \x03\x02\x19\x1a\x8f\x03\x20If\x20this\x20request\x20is\x20resuming\x20a\
    \x20previously\x20interrupted\x20SQL\x20statement\n\x20execution,\x20`re\
    sume_token`\x20should\x20be\x20copied\x20from\x20the\x20last\n\x20[Parti\
    alResultSet][google.spanner.v1.PartialResultSet]\x20yielded\x20before\
    \x20the\x20interruption.\x20Doing\x20this\n\x20enables\x20the\x20new\x20\
    SQL\x20statement\x20execution\x20to\x20resume\x20where\x20the\x20last\
    \x20one\x20left\n\x20off.\x20The\x20rest\x20of\x20the\x20request\x20para\
    meters\x20must\x20exactly\x20match\x20the\n\x20request\x20that\x20yielde\
    d\x20this\x20token.\n\n\x0f\n\x05\x04\x06\x02\x05\x04\x12\x06\x82\x03\
    \x02\xfa\x02$\n\r\n\x05\x04\x06\x02\x05\x05\x12\x04\x82\x03\x02\x07\n\r\
    \n\x05\x04\x06\x02\x05\x01\x12\x04\x82\x03\x08\x14\n\r\n\x05\x04\x06\x02\
    \x05\x03\x12\x04\x82\x03\x17\x18\n\xf2\x02\n\x04\x04\x06\x02\x06\x12\x04\
    \x87\x03\x02\x1b\x1a\xe3\x02\x20Used\x20to\x20control\x20the\x20amount\
    \x20of\x20debugging\x20information\x20returned\x20in\n\x20[ResultSetStat\
    s][google.spanner.v1.ResultSetStats].\x20If\x20[partition_token][google.\
    spanner.v1.ExecuteSqlRequest.partition_token]\x20is\x20set,\x20[query_mo\
    de][google.spanner.v1.ExecuteSqlRequest.query_mode]\x20can\x20only\n\x20\
    be\x20set\x20to\x20[QueryMode.NORMAL][google.spanner.v1.ExecuteSqlReques\
    t.QueryMode.NORMAL].\n\n\x0f\n\x05\x04\x06\x02\x06\x04\x12\x06\x87\x03\
    \x02\x82\x03\x19\n\r\n\x05\x04\x06\x02\x06\x06\x12\x04\x87\x03\x02\x0b\n\
    \r\n\x05\x04\x06\x02\x06\x01\x12\x04\x87\x03\x0c\x16\n\r\n\x05\x04\x06\
    \x02\x06\x03\x12\x04\x87\x03\x19\x1a\n\x99\x02\n\x04\x04\x06\x02\x07\x12\
    \x04\x8d\x03\x02\x1c\x1a\x8a\x02\x20If\x20present,\x20results\x20will\
    \x20be\x20restricted\x20to\x20the\x20specified\x20partition\n\x20previou\
    sly\x20created\x20using\x20PartitionQuery().\x20\x20There\x20must\x20be\
    \x20an\x20exact\n\x20match\x20for\x20the\x20values\x20of\x20fields\x20co\
    mmon\x20to\x20this\x20message\x20and\x20the\n\x20PartitionQueryRequest\
    \x20message\x20used\x20to\x20create\x20this\x20partition_token.\n\n\x0f\
    \n\x05\x04\x06\x02\x07\x04\x12\x06\x8d\x03\x02\x87\x03\x1b\n\r\n\x05\x04\
    \x06\x02\x07\x05\x12\x04\x8d\x03\x02\x07\n\r\n\x05\x04\x06\x02\x07\x01\
    \x12\x04\x8d\x03\x08\x17\n\r\n\x05\x04\x06\x02\x07\x03\x12\x04\x8d\x03\
    \x1a\x1b\n\x95\x04\n\x04\x04\x06\x02\x08\x12\x04\x99\x03\x02\x12\x1a\x86\
    \x04\x20A\x20per-transaction\x20sequence\x20number\x20used\x20to\x20iden\
    tify\x20this\x20request.\x20This\n\x20makes\x20each\x20request\x20idempo\
    tent\x20such\x20that\x20if\x20the\x20request\x20is\x20received\x20multip\
    le\n\x20times,\x20at\x20most\x20one\x20will\x20succeed.\n\n\x20The\x20se\
    quence\x20number\x20must\x20be\x20monotonically\x20increasing\x20within\
    \x20the\n\x20transaction.\x20If\x20a\x20request\x20arrives\x20for\x20the\
    \x20first\x20time\x20with\x20an\x20out-of-order\n\x20sequence\x20number,\
    \x20the\x20transaction\x20may\x20be\x20aborted.\x20Replays\x20of\x20prev\
    iously\n\x20handled\x20requests\x20will\x20yield\x20the\x20same\x20respo\
    nse\x20as\x20the\x20first\x20execution.\n\n\x20Required\x20for\x20DML\
    \x20statements.\x20Ignored\x20for\x20queries.\n\n\x0f\n\x05\x04\x06\x02\
    \x08\x04\x12\x06\x99\x03\x02\x8d\x03\x1c\n\r\n\x05\x04\x06\x02\x08\x05\
    \x12\x04\x99\x03\x02\x07\n\r\n\x05\x04\x06\x02\x08\x01\x12\x04\x99\x03\
    \x08\r\n\r\n\x05\x04\x06\x02\x08\x03\x12\x04\x99\x03\x10\x11\nN\n\x02\
    \x04\x07\x12\x06\x9e\x03\0\xb0\x03\x01\x1a@\x20Options\x20for\x20a\x20Pa\
    rtitionQueryRequest\x20and\n\x20PartitionReadRequest.\n\n\x0b\n\x03\x04\
    \x07\x01\x12\x04\x9e\x03\x08\x18\n\xba\x02\n\x04\x04\x07\x02\0\x12\x04\
    \xa5\x03\x02!\x1a\xab\x02\x20**Note:**\x20This\x20hint\x20is\x20currentl\
    y\x20ignored\x20by\x20PartitionQuery\x20and\n\x20PartitionRead\x20reques\
    ts.\n\n\x20The\x20desired\x20data\x20size\x20for\x20each\x20partition\
    \x20generated.\x20\x20The\x20default\x20for\x20this\n\x20option\x20is\
    \x20currently\x201\x20GiB.\x20\x20This\x20is\x20only\x20a\x20hint.\x20Th\
    e\x20actual\x20size\x20of\x20each\n\x20partition\x20may\x20be\x20smaller\
    \x20or\x20larger\x20than\x20this\x20size\x20request.\n\n\x0f\n\x05\x04\
    \x07\x02\0\x04\x12\x06\xa5\x03\x02\x9e\x03\x1a\n\r\n\x05\x04\x07\x02\0\
    \x05\x12\x04\xa5\x03\x02\x07\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xa5\x03\
    \x08\x1c\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xa5\x03\x1f\x20\n\xb8\x03\n\
    \x04\x04\x07\x02\x01\x12\x04\xaf\x03\x02\x1b\x1a\xa9\x03\x20**Note:**\
    \x20This\x20hint\x20is\x20currently\x20ignored\x20by\x20PartitionQuery\
    \x20and\n\x20PartitionRead\x20requests.\n\n\x20The\x20desired\x20maximum\
    \x20number\x20of\x20partitions\x20to\x20return.\x20\x20For\x20example,\
    \x20this\x20may\n\x20be\x20set\x20to\x20the\x20number\x20of\x20workers\
    \x20available.\x20\x20The\x20default\x20for\x20this\x20option\n\x20is\
    \x20currently\x2010,000.\x20The\x20maximum\x20value\x20is\x20currently\
    \x20200,000.\x20\x20This\x20is\x20only\n\x20a\x20hint.\x20\x20The\x20act\
    ual\x20number\x20of\x20partitions\x20returned\x20may\x20be\x20smaller\
    \x20or\x20larger\n\x20than\x20this\x20maximum\x20count\x20request.\n\n\
    \x0f\n\x05\x04\x07\x02\x01\x04\x12\x06\xaf\x03\x02\xa5\x03!\n\r\n\x05\
    \x04\x07\x02\x01\x05\x12\x04\xaf\x03\x02\x07\n\r\n\x05\x04\x07\x02\x01\
    \x01\x12\x04\xaf\x03\x08\x16\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xaf\
    \x03\x19\x1a\nZ\n\x02\x04\x08\x12\x06\xb3\x03\0\xe3\x03\x01\x1aL\x20The\
    \x20request\x20for\x20[PartitionQuery][google.spanner.v1.Spanner.Partiti\
    onQuery]\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xb3\x03\x08\x1d\nD\n\x04\x04\
    \x08\x02\0\x12\x04\xb5\x03\x02\x15\x1a6\x20Required.\x20The\x20session\
    \x20used\x20to\x20create\x20the\x20partitions.\n\n\x0f\n\x05\x04\x08\x02\
    \0\x04\x12\x06\xb5\x03\x02\xb3\x03\x1f\n\r\n\x05\x04\x08\x02\0\x05\x12\
    \x04\xb5\x03\x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xb5\x03\t\x10\n\
    \r\n\x05\x04\x08\x02\0\x03\x12\x04\xb5\x03\x13\x14\no\n\x04\x04\x08\x02\
    \x01\x12\x04\xb9\x03\x02&\x1aa\x20Read\x20only\x20snapshot\x20transactio\
    ns\x20are\x20supported,\x20read/write\x20and\x20single\x20use\n\x20trans\
    actions\x20are\x20not.\n\n\x0f\n\x05\x04\x08\x02\x01\x04\x12\x06\xb9\x03\
    \x02\xb5\x03\x15\n\r\n\x05\x04\x08\x02\x01\x06\x12\x04\xb9\x03\x02\x15\n\
    \r\n\x05\x04\x08\x02\x01\x01\x12\x04\xb9\x03\x16!\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\xb9\x03$%\n\xee\x04\n\x04\x04\x08\x02\x02\x12\x04\xc5\
    \x03\x02\x11\x1a\xdf\x04\x20The\x20query\x20request\x20to\x20generate\
    \x20partitions\x20for.\x20The\x20request\x20will\x20fail\x20if\n\x20the\
    \x20query\x20is\x20not\x20root\x20partitionable.\x20The\x20query\x20plan\
    \x20of\x20a\x20root\n\x20partitionable\x20query\x20has\x20a\x20single\
    \x20distributed\x20union\x20operator.\x20A\x20distributed\n\x20union\x20\
    operator\x20conceptually\x20divides\x20one\x20or\x20more\x20tables\x20in\
    to\x20multiple\n\x20splits,\x20remotely\x20evaluates\x20a\x20subquery\
    \x20independently\x20on\x20each\x20split,\x20and\n\x20then\x20unions\x20\
    all\x20results.\n\n\x20This\x20must\x20not\x20contain\x20DML\x20commands\
    ,\x20such\x20as\x20INSERT,\x20UPDATE,\x20or\n\x20DELETE.\x20Use\x20[Exec\
    uteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]\x20with\
    \x20a\n\x20PartitionedDml\x20transaction\x20for\x20large,\x20partition-f\
    riendly\x20DML\x20operations.\n\n\x0f\n\x05\x04\x08\x02\x02\x04\x12\x06\
    \xc5\x03\x02\xb9\x03&\n\r\n\x05\x04\x08\x02\x02\x05\x12\x04\xc5\x03\x02\
    \x08\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xc5\x03\t\x0c\n\r\n\x05\x04\
    \x08\x02\x02\x03\x12\x04\xc5\x03\x0f\x10\n\x83\x05\n\x04\x04\x08\x02\x03\
    \x12\x04\xd5\x03\x02$\x1a\xf4\x04\x20The\x20SQL\x20query\x20string\x20ca\
    n\x20contain\x20parameter\x20placeholders.\x20A\x20parameter\n\x20placeh\
    older\x20consists\x20of\x20`'@'`\x20followed\x20by\x20the\x20parameter\n\
    \x20name.\x20Parameter\x20names\x20consist\x20of\x20any\x20combination\
    \x20of\x20letters,\n\x20numbers,\x20and\x20underscores.\n\n\x20Parameter\
    s\x20can\x20appear\x20anywhere\x20that\x20a\x20literal\x20value\x20is\
    \x20expected.\x20\x20The\x20same\n\x20parameter\x20name\x20can\x20be\x20\
    used\x20more\x20than\x20once,\x20for\x20example:\n\x20\x20\x20`\"WHERE\
    \x20id\x20>\x20@msg_id\x20AND\x20id\x20<\x20@msg_id\x20+\x20100\"`\n\n\
    \x20It\x20is\x20an\x20error\x20to\x20execute\x20an\x20SQL\x20query\x20wi\
    th\x20unbound\x20parameters.\n\n\x20Parameter\x20values\x20are\x20specif\
    ied\x20using\x20`params`,\x20which\x20is\x20a\x20JSON\n\x20object\x20who\
    se\x20keys\x20are\x20parameter\x20names,\x20and\x20whose\x20values\x20ar\
    e\x20the\n\x20corresponding\x20parameter\x20values.\n\n\x0f\n\x05\x04\
    \x08\x02\x03\x04\x12\x06\xd5\x03\x02\xc5\x03\x11\n\r\n\x05\x04\x08\x02\
    \x03\x06\x12\x04\xd5\x03\x02\x18\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\
    \xd5\x03\x19\x1f\n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\xd5\x03\"#\n\xdc\
    \x03\n\x04\x04\x08\x02\x04\x12\x04\xdf\x03\x02$\x1a\xcd\x03\x20It\x20is\
    \x20not\x20always\x20possible\x20for\x20Cloud\x20Spanner\x20to\x20infer\
    \x20the\x20right\x20SQL\x20type\n\x20from\x20a\x20JSON\x20value.\x20\x20\
    For\x20example,\x20values\x20of\x20type\x20`BYTES`\x20and\x20values\n\
    \x20of\x20type\x20`STRING`\x20both\x20appear\x20in\x20[params][google.sp\
    anner.v1.PartitionQueryRequest.params]\x20as\x20JSON\x20strings.\n\n\x20\
    In\x20these\x20cases,\x20`param_types`\x20can\x20be\x20used\x20to\x20spe\
    cify\x20the\x20exact\n\x20SQL\x20type\x20for\x20some\x20or\x20all\x20of\
    \x20the\x20SQL\x20query\x20parameters.\x20See\x20the\n\x20definition\x20\
    of\x20[Type][google.spanner.v1.Type]\x20for\x20more\x20information\n\x20\
    about\x20SQL\x20types.\n\n\x0f\n\x05\x04\x08\x02\x04\x04\x12\x06\xdf\x03\
    \x02\xd5\x03$\n\r\n\x05\x04\x08\x02\x04\x06\x12\x04\xdf\x03\x02\x13\n\r\
    \n\x05\x04\x08\x02\x04\x01\x12\x04\xdf\x03\x14\x1f\n\r\n\x05\x04\x08\x02\
    \x04\x03\x12\x04\xdf\x03\"#\nO\n\x04\x04\x08\x02\x05\x12\x04\xe2\x03\x02\
    )\x1aA\x20Additional\x20options\x20that\x20affect\x20how\x20many\x20part\
    itions\x20are\x20created.\n\n\x0f\n\x05\x04\x08\x02\x05\x04\x12\x06\xe2\
    \x03\x02\xdf\x03$\n\r\n\x05\x04\x08\x02\x05\x06\x12\x04\xe2\x03\x02\x12\
    \n\r\n\x05\x04\x08\x02\x05\x01\x12\x04\xe2\x03\x13$\n\r\n\x05\x04\x08\
    \x02\x05\x03\x12\x04\xe2\x03'(\nX\n\x02\x04\t\x12\x06\xe6\x03\0\x85\x04\
    \x01\x1aJ\x20The\x20request\x20for\x20[PartitionRead][google.spanner.v1.\
    Spanner.PartitionRead]\n\n\x0b\n\x03\x04\t\x01\x12\x04\xe6\x03\x08\x1c\n\
    D\n\x04\x04\t\x02\0\x12\x04\xe8\x03\x02\x15\x1a6\x20Required.\x20The\x20\
    session\x20used\x20to\x20create\x20the\x20partitions.\n\n\x0f\n\x05\x04\
    \t\x02\0\x04\x12\x06\xe8\x03\x02\xe6\x03\x1e\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\xe8\x03\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xe8\x03\t\x10\
    \n\r\n\x05\x04\t\x02\0\x03\x12\x04\xe8\x03\x13\x14\no\n\x04\x04\t\x02\
    \x01\x12\x04\xec\x03\x02&\x1aa\x20Read\x20only\x20snapshot\x20transactio\
    ns\x20are\x20supported,\x20read/write\x20and\x20single\x20use\n\x20trans\
    actions\x20are\x20not.\n\n\x0f\n\x05\x04\t\x02\x01\x04\x12\x06\xec\x03\
    \x02\xe8\x03\x15\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\xec\x03\x02\x15\n\r\
    \n\x05\x04\t\x02\x01\x01\x12\x04\xec\x03\x16!\n\r\n\x05\x04\t\x02\x01\
    \x03\x12\x04\xec\x03$%\nK\n\x04\x04\t\x02\x02\x12\x04\xef\x03\x02\x13\
    \x1a=\x20Required.\x20The\x20name\x20of\x20the\x20table\x20in\x20the\x20\
    database\x20to\x20be\x20read.\n\n\x0f\n\x05\x04\t\x02\x02\x04\x12\x06\
    \xef\x03\x02\xec\x03&\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\xef\x03\x02\
    \x08\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\xef\x03\t\x0e\n\r\n\x05\x04\t\
    \x02\x02\x03\x12\x04\xef\x03\x11\x12\n\xdf\x02\n\x04\x04\t\x02\x03\x12\
    \x04\xf4\x03\x02\x13\x1a\xd0\x02\x20If\x20non-empty,\x20the\x20name\x20o\
    f\x20an\x20index\x20on\x20[table][google.spanner.v1.PartitionReadRequest\
    .table].\x20This\x20index\x20is\n\x20used\x20instead\x20of\x20the\x20tab\
    le\x20primary\x20key\x20when\x20interpreting\x20[key_set][google.spanner\
    .v1.PartitionReadRequest.key_set]\n\x20and\x20sorting\x20result\x20rows.\
    \x20See\x20[key_set][google.spanner.v1.PartitionReadRequest.key_set]\x20\
    for\x20further\x20information.\n\n\x0f\n\x05\x04\t\x02\x03\x04\x12\x06\
    \xf4\x03\x02\xef\x03\x13\n\r\n\x05\x04\t\x02\x03\x05\x12\x04\xf4\x03\x02\
    \x08\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\xf4\x03\t\x0e\n\r\n\x05\x04\t\
    \x02\x03\x03\x12\x04\xf4\x03\x11\x12\n\x88\x01\n\x04\x04\t\x02\x04\x12\
    \x04\xf8\x03\x02\x1e\x1az\x20The\x20columns\x20of\x20[table][google.span\
    ner.v1.PartitionReadRequest.table]\x20to\x20be\x20returned\x20for\x20eac\
    h\x20row\x20matching\n\x20this\x20request.\n\n\r\n\x05\x04\t\x02\x04\x04\
    \x12\x04\xf8\x03\x02\n\n\r\n\x05\x04\t\x02\x04\x05\x12\x04\xf8\x03\x0b\
    \x11\n\r\n\x05\x04\t\x02\x04\x01\x12\x04\xf8\x03\x12\x19\n\r\n\x05\x04\t\
    \x02\x04\x03\x12\x04\xf8\x03\x1c\x1d\n\xe1\x04\n\x04\x04\t\x02\x05\x12\
    \x04\x81\x04\x02\x15\x1a\xd2\x04\x20Required.\x20`key_set`\x20identifies\
    \x20the\x20rows\x20to\x20be\x20yielded.\x20`key_set`\x20names\x20the\n\
    \x20primary\x20keys\x20of\x20the\x20rows\x20in\x20[table][google.spanner\
    .v1.PartitionReadRequest.table]\x20to\x20be\x20yielded,\x20unless\x20[in\
    dex][google.spanner.v1.PartitionReadRequest.index]\n\x20is\x20present.\
    \x20If\x20[index][google.spanner.v1.PartitionReadRequest.index]\x20is\
    \x20present,\x20then\x20[key_set][google.spanner.v1.PartitionReadRequest\
    .key_set]\x20instead\x20names\n\x20index\x20keys\x20in\x20[index][google\
    .spanner.v1.PartitionReadRequest.index].\n\n\x20It\x20is\x20not\x20an\
    \x20error\x20for\x20the\x20`key_set`\x20to\x20name\x20rows\x20that\x20do\
    \x20not\n\x20exist\x20in\x20the\x20database.\x20Read\x20yields\x20nothin\
    g\x20for\x20nonexistent\x20rows.\n\n\x0f\n\x05\x04\t\x02\x05\x04\x12\x06\
    \x81\x04\x02\xf8\x03\x1e\n\r\n\x05\x04\t\x02\x05\x06\x12\x04\x81\x04\x02\
    \x08\n\r\n\x05\x04\t\x02\x05\x01\x12\x04\x81\x04\t\x10\n\r\n\x05\x04\t\
    \x02\x05\x03\x12\x04\x81\x04\x13\x14\nO\n\x04\x04\t\x02\x06\x12\x04\x84\
    \x04\x02)\x1aA\x20Additional\x20options\x20that\x20affect\x20how\x20many\
    \x20partitions\x20are\x20created.\n\n\x0f\n\x05\x04\t\x02\x06\x04\x12\
    \x06\x84\x04\x02\x81\x04\x15\n\r\n\x05\x04\t\x02\x06\x06\x12\x04\x84\x04\
    \x02\x12\n\r\n\x05\x04\t\x02\x06\x01\x12\x04\x84\x04\x13$\n\r\n\x05\x04\
    \t\x02\x06\x03\x12\x04\x84\x04'(\nY\n\x02\x04\n\x12\x06\x89\x04\0\x8e\
    \x04\x01\x1aK\x20Information\x20returned\x20for\x20each\x20partition\x20\
    returned\x20in\x20a\n\x20PartitionResponse.\n\n\x0b\n\x03\x04\n\x01\x12\
    \x04\x89\x04\x08\x11\n\xb4\x01\n\x04\x04\n\x02\0\x12\x04\x8d\x04\x02\x1c\
    \x1a\xa5\x01\x20This\x20token\x20can\x20be\x20passed\x20to\x20Read,\x20S\
    treamingRead,\x20ExecuteSql,\x20or\n\x20ExecuteStreamingSql\x20requests\
    \x20to\x20restrict\x20the\x20results\x20to\x20those\x20identified\x20by\
    \n\x20this\x20partition\x20token.\n\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\
    \x8d\x04\x02\x89\x04\x13\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x8d\x04\x02\
    \x07\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x8d\x04\x08\x17\n\r\n\x05\x04\n\
    \x02\0\x03\x12\x04\x8d\x04\x1a\x1b\n\x99\x01\n\x02\x04\x0b\x12\x06\x92\
    \x04\0\x98\x04\x01\x1a\x8a\x01\x20The\x20response\x20for\x20[PartitionQu\
    ery][google.spanner.v1.Spanner.PartitionQuery]\n\x20or\x20[PartitionRead\
    ][google.spanner.v1.Spanner.PartitionRead]\n\n\x0b\n\x03\x04\x0b\x01\x12\
    \x04\x92\x04\x08\x19\n3\n\x04\x04\x0b\x02\0\x12\x04\x94\x04\x02$\x1a%\
    \x20Partitions\x20created\x20by\x20this\x20request.\n\n\r\n\x05\x04\x0b\
    \x02\0\x04\x12\x04\x94\x04\x02\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\x94\
    \x04\x0b\x14\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\x94\x04\x15\x1f\n\r\n\
    \x05\x04\x0b\x02\0\x03\x12\x04\x94\x04\"#\n4\n\x04\x04\x0b\x02\x01\x12\
    \x04\x97\x04\x02\x1e\x1a&\x20Transaction\x20created\x20by\x20this\x20req\
    uest.\n\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\x97\x04\x02\x94\x04$\n\r\
    \n\x05\x04\x0b\x02\x01\x06\x12\x04\x97\x04\x02\r\n\r\n\x05\x04\x0b\x02\
    \x01\x01\x12\x04\x97\x04\x0e\x19\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\
    \x97\x04\x1c\x1d\n\x85\x01\n\x02\x04\x0c\x12\x06\x9c\x04\0\xd0\x04\x01\
    \x1aw\x20The\x20request\x20for\x20[Read][google.spanner.v1.Spanner.Read]\
    \x20and\n\x20[StreamingRead][google.spanner.v1.Spanner.StreamingRead].\n\
    \n\x0b\n\x03\x04\x0c\x01\x12\x04\x9c\x04\x08\x13\nL\n\x04\x04\x0c\x02\0\
    \x12\x04\x9e\x04\x02\x15\x1a>\x20Required.\x20The\x20session\x20in\x20wh\
    ich\x20the\x20read\x20should\x20be\x20performed.\n\n\x0f\n\x05\x04\x0c\
    \x02\0\x04\x12\x06\x9e\x04\x02\x9c\x04\x15\n\r\n\x05\x04\x0c\x02\0\x05\
    \x12\x04\x9e\x04\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\x9e\x04\t\
    \x10\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\x9e\x04\x13\x14\n\x87\x01\n\x04\
    \x04\x0c\x02\x01\x12\x04\xa2\x04\x02&\x1ay\x20The\x20transaction\x20to\
    \x20use.\x20If\x20none\x20is\x20provided,\x20the\x20default\x20is\x20a\n\
    \x20temporary\x20read-only\x20transaction\x20with\x20strong\x20concurren\
    cy.\n\n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\xa2\x04\x02\x9e\x04\x15\n\
    \r\n\x05\x04\x0c\x02\x01\x06\x12\x04\xa2\x04\x02\x15\n\r\n\x05\x04\x0c\
    \x02\x01\x01\x12\x04\xa2\x04\x16!\n\r\n\x05\x04\x0c\x02\x01\x03\x12\x04\
    \xa2\x04$%\nK\n\x04\x04\x0c\x02\x02\x12\x04\xa5\x04\x02\x13\x1a=\x20Requ\
    ired.\x20The\x20name\x20of\x20the\x20table\x20in\x20the\x20database\x20t\
    o\x20be\x20read.\n\n\x0f\n\x05\x04\x0c\x02\x02\x04\x12\x06\xa5\x04\x02\
    \xa2\x04&\n\r\n\x05\x04\x0c\x02\x02\x05\x12\x04\xa5\x04\x02\x08\n\r\n\
    \x05\x04\x0c\x02\x02\x01\x12\x04\xa5\x04\t\x0e\n\r\n\x05\x04\x0c\x02\x02\
    \x03\x12\x04\xa5\x04\x11\x12\n\xc4\x02\n\x04\x04\x0c\x02\x03\x12\x04\xaa\
    \x04\x02\x13\x1a\xb5\x02\x20If\x20non-empty,\x20the\x20name\x20of\x20an\
    \x20index\x20on\x20[table][google.spanner.v1.ReadRequest.table].\x20This\
    \x20index\x20is\n\x20used\x20instead\x20of\x20the\x20table\x20primary\
    \x20key\x20when\x20interpreting\x20[key_set][google.spanner.v1.ReadReque\
    st.key_set]\n\x20and\x20sorting\x20result\x20rows.\x20See\x20[key_set][g\
    oogle.spanner.v1.ReadRequest.key_set]\x20for\x20further\x20information.\
    \n\n\x0f\n\x05\x04\x0c\x02\x03\x04\x12\x06\xaa\x04\x02\xa5\x04\x13\n\r\n\
    \x05\x04\x0c\x02\x03\x05\x12\x04\xaa\x04\x02\x08\n\r\n\x05\x04\x0c\x02\
    \x03\x01\x12\x04\xaa\x04\t\x0e\n\r\n\x05\x04\x0c\x02\x03\x03\x12\x04\xaa\
    \x04\x11\x12\n\x7f\n\x04\x04\x0c\x02\x04\x12\x04\xae\x04\x02\x1e\x1aq\
    \x20The\x20columns\x20of\x20[table][google.spanner.v1.ReadRequest.table]\
    \x20to\x20be\x20returned\x20for\x20each\x20row\x20matching\n\x20this\x20\
    request.\n\n\r\n\x05\x04\x0c\x02\x04\x04\x12\x04\xae\x04\x02\n\n\r\n\x05\
    \x04\x0c\x02\x04\x05\x12\x04\xae\x04\x0b\x11\n\r\n\x05\x04\x0c\x02\x04\
    \x01\x12\x04\xae\x04\x12\x19\n\r\n\x05\x04\x0c\x02\x04\x03\x12\x04\xae\
    \x04\x1c\x1d\n\xd6\x07\n\x04\x04\x0c\x02\x05\x12\x04\xbc\x04\x02\x15\x1a\
    \xc7\x07\x20Required.\x20`key_set`\x20identifies\x20the\x20rows\x20to\
    \x20be\x20yielded.\x20`key_set`\x20names\x20the\n\x20primary\x20keys\x20\
    of\x20the\x20rows\x20in\x20[table][google.spanner.v1.ReadRequest.table]\
    \x20to\x20be\x20yielded,\x20unless\x20[index][google.spanner.v1.ReadRequ\
    est.index]\n\x20is\x20present.\x20If\x20[index][google.spanner.v1.ReadRe\
    quest.index]\x20is\x20present,\x20then\x20[key_set][google.spanner.v1.Re\
    adRequest.key_set]\x20instead\x20names\n\x20index\x20keys\x20in\x20[inde\
    x][google.spanner.v1.ReadRequest.index].\n\n\x20If\x20the\x20[partition_\
    token][google.spanner.v1.ReadRequest.partition_token]\x20field\x20is\x20\
    empty,\x20rows\x20are\x20yielded\n\x20in\x20table\x20primary\x20key\x20o\
    rder\x20(if\x20[index][google.spanner.v1.ReadRequest.index]\x20is\x20emp\
    ty)\x20or\x20index\x20key\x20order\n\x20(if\x20[index][google.spanner.v1\
    .ReadRequest.index]\x20is\x20non-empty).\x20\x20If\x20the\x20[partition_\
    token][google.spanner.v1.ReadRequest.partition_token]\x20field\x20is\x20\
    not\n\x20empty,\x20rows\x20will\x20be\x20yielded\x20in\x20an\x20unspecif\
    ied\x20order.\n\n\x20It\x20is\x20not\x20an\x20error\x20for\x20the\x20`ke\
    y_set`\x20to\x20name\x20rows\x20that\x20do\x20not\n\x20exist\x20in\x20th\
    e\x20database.\x20Read\x20yields\x20nothing\x20for\x20nonexistent\x20row\
    s.\n\n\x0f\n\x05\x04\x0c\x02\x05\x04\x12\x06\xbc\x04\x02\xae\x04\x1e\n\r\
    \n\x05\x04\x0c\x02\x05\x06\x12\x04\xbc\x04\x02\x08\n\r\n\x05\x04\x0c\x02\
    \x05\x01\x12\x04\xbc\x04\t\x10\n\r\n\x05\x04\x0c\x02\x05\x03\x12\x04\xbc\
    \x04\x13\x14\n\xb7\x01\n\x04\x04\x0c\x02\x06\x12\x04\xc1\x04\x02\x12\x1a\
    \xa8\x01\x20If\x20greater\x20than\x20zero,\x20only\x20the\x20first\x20`l\
    imit`\x20rows\x20are\x20yielded.\x20If\x20`limit`\n\x20is\x20zero,\x20th\
    e\x20default\x20is\x20no\x20limit.\x20A\x20limit\x20cannot\x20be\x20spec\
    ified\x20if\n\x20`partition_token`\x20is\x20set.\n\n\x0f\n\x05\x04\x0c\
    \x02\x06\x04\x12\x06\xc1\x04\x02\xbc\x04\x15\n\r\n\x05\x04\x0c\x02\x06\
    \x05\x12\x04\xc1\x04\x02\x07\n\r\n\x05\x04\x0c\x02\x06\x01\x12\x04\xc1\
    \x04\x08\r\n\r\n\x05\x04\x0c\x02\x06\x03\x12\x04\xc1\x04\x10\x11\n\xf9\
    \x02\n\x04\x04\x0c\x02\x07\x12\x04\xc9\x04\x02\x19\x1a\xea\x02\x20If\x20\
    this\x20request\x20is\x20resuming\x20a\x20previously\x20interrupted\x20r\
    ead,\n\x20`resume_token`\x20should\x20be\x20copied\x20from\x20the\x20las\
    t\n\x20[PartialResultSet][google.spanner.v1.PartialResultSet]\x20yielded\
    \x20before\x20the\x20interruption.\x20Doing\x20this\n\x20enables\x20the\
    \x20new\x20read\x20to\x20resume\x20where\x20the\x20last\x20read\x20left\
    \x20off.\x20The\n\x20rest\x20of\x20the\x20request\x20parameters\x20must\
    \x20exactly\x20match\x20the\x20request\n\x20that\x20yielded\x20this\x20t\
    oken.\n\n\x0f\n\x05\x04\x0c\x02\x07\x04\x12\x06\xc9\x04\x02\xc1\x04\x12\
    \n\r\n\x05\x04\x0c\x02\x07\x05\x12\x04\xc9\x04\x02\x07\n\r\n\x05\x04\x0c\
    \x02\x07\x01\x12\x04\xc9\x04\x08\x14\n\r\n\x05\x04\x0c\x02\x07\x03\x12\
    \x04\xc9\x04\x17\x18\n\x99\x02\n\x04\x04\x0c\x02\x08\x12\x04\xcf\x04\x02\
    \x1d\x1a\x8a\x02\x20If\x20present,\x20results\x20will\x20be\x20restricte\
    d\x20to\x20the\x20specified\x20partition\n\x20previously\x20created\x20u\
    sing\x20PartitionRead().\x20\x20\x20\x20There\x20must\x20be\x20an\x20exa\
    ct\n\x20match\x20for\x20the\x20values\x20of\x20fields\x20common\x20to\
    \x20this\x20message\x20and\x20the\n\x20PartitionReadRequest\x20message\
    \x20used\x20to\x20create\x20this\x20partition_token.\n\n\x0f\n\x05\x04\
    \x0c\x02\x08\x04\x12\x06\xcf\x04\x02\xc9\x04\x19\n\r\n\x05\x04\x0c\x02\
    \x08\x05\x12\x04\xcf\x04\x02\x07\n\r\n\x05\x04\x0c\x02\x08\x01\x12\x04\
    \xcf\x04\x08\x17\n\r\n\x05\x04\x0c\x02\x08\x03\x12\x04\xcf\x04\x1a\x1c\n\
    _\n\x02\x04\r\x12\x06\xd3\x04\0\xd9\x04\x01\x1aQ\x20The\x20request\x20fo\
    r\x20[BeginTransaction][google.spanner.v1.Spanner.BeginTransaction].\n\n\
    \x0b\n\x03\x04\r\x01\x12\x04\xd3\x04\x08\x1f\nD\n\x04\x04\r\x02\0\x12\
    \x04\xd5\x04\x02\x15\x1a6\x20Required.\x20The\x20session\x20in\x20which\
    \x20the\x20transaction\x20runs.\n\n\x0f\n\x05\x04\r\x02\0\x04\x12\x06\
    \xd5\x04\x02\xd3\x04!\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xd5\x04\x02\x08\
    \n\r\n\x05\x04\r\x02\0\x01\x12\x04\xd5\x04\t\x10\n\r\n\x05\x04\r\x02\0\
    \x03\x12\x04\xd5\x04\x13\x14\n:\n\x04\x04\r\x02\x01\x12\x04\xd8\x04\x02!\
    \x1a,\x20Required.\x20Options\x20for\x20the\x20new\x20transaction.\n\n\
    \x0f\n\x05\x04\r\x02\x01\x04\x12\x06\xd8\x04\x02\xd5\x04\x15\n\r\n\x05\
    \x04\r\x02\x01\x06\x12\x04\xd8\x04\x02\x14\n\r\n\x05\x04\r\x02\x01\x01\
    \x12\x04\xd8\x04\x15\x1c\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\xd8\x04\x1f\
    \x20\nK\n\x02\x04\x0e\x12\x06\xdc\x04\0\xf5\x04\x01\x1a=\x20The\x20reque\
    st\x20for\x20[Commit][google.spanner.v1.Spanner.Commit].\n\n\x0b\n\x03\
    \x04\x0e\x01\x12\x04\xdc\x04\x08\x15\nZ\n\x04\x04\x0e\x02\0\x12\x04\xde\
    \x04\x02\x15\x1aL\x20Required.\x20The\x20session\x20in\x20which\x20the\
    \x20transaction\x20to\x20be\x20committed\x20is\x20running.\n\n\x0f\n\x05\
    \x04\x0e\x02\0\x04\x12\x06\xde\x04\x02\xdc\x04\x17\n\r\n\x05\x04\x0e\x02\
    \0\x05\x12\x04\xde\x04\x02\x08\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xde\
    \x04\t\x10\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xde\x04\x13\x14\n?\n\x04\
    \x04\x0e\x08\0\x12\x06\xe1\x04\x02\xef\x04\x03\x1a/\x20Required.\x20The\
    \x20transaction\x20in\x20which\x20to\x20commit.\n\n\r\n\x05\x04\x0e\x08\
    \0\x01\x12\x04\xe1\x04\x08\x13\n8\n\x04\x04\x0e\x02\x01\x12\x04\xe3\x04\
    \x04\x1d\x1a*\x20Commit\x20a\x20previously-started\x20transaction.\n\n\r\
    \n\x05\x04\x0e\x02\x01\x05\x12\x04\xe3\x04\x04\t\n\r\n\x05\x04\x0e\x02\
    \x01\x01\x12\x04\xe3\x04\n\x18\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xe3\
    \x04\x1b\x1c\n\xa4\x04\n\x04\x04\x0e\x02\x02\x12\x04\xee\x04\x042\x1a\
    \x95\x04\x20Execute\x20mutations\x20in\x20a\x20temporary\x20transaction.\
    \x20Note\x20that\x20unlike\n\x20commit\x20of\x20a\x20previously-started\
    \x20transaction,\x20commit\x20with\x20a\n\x20temporary\x20transaction\
    \x20is\x20non-idempotent.\x20That\x20is,\x20if\x20the\n\x20`CommitReques\
    t`\x20is\x20sent\x20to\x20Cloud\x20Spanner\x20more\x20than\x20once\x20(f\
    or\n\x20instance,\x20due\x20to\x20retries\x20in\x20the\x20application,\
    \x20or\x20in\x20the\n\x20transport\x20library),\x20it\x20is\x20possible\
    \x20that\x20the\x20mutations\x20are\n\x20executed\x20more\x20than\x20onc\
    e.\x20If\x20this\x20is\x20undesirable,\x20use\n\x20[BeginTransaction][go\
    ogle.spanner.v1.Spanner.BeginTransaction]\x20and\n\x20[Commit][google.sp\
    anner.v1.Spanner.Commit]\x20instead.\n\n\r\n\x05\x04\x0e\x02\x02\x06\x12\
    \x04\xee\x04\x04\x16\n\r\n\x05\x04\x0e\x02\x02\x01\x12\x04\xee\x04\x17-\
    \n\r\n\x05\x04\x0e\x02\x02\x03\x12\x04\xee\x0401\n\x9b\x01\n\x04\x04\x0e\
    \x02\x03\x12\x04\xf4\x04\x02\"\x1a\x8c\x01\x20The\x20mutations\x20to\x20\
    be\x20executed\x20when\x20this\x20transaction\x20commits.\x20All\n\x20mu\
    tations\x20are\x20applied\x20atomically,\x20in\x20the\x20order\x20they\
    \x20appear\x20in\n\x20this\x20list.\n\n\r\n\x05\x04\x0e\x02\x03\x04\x12\
    \x04\xf4\x04\x02\n\n\r\n\x05\x04\x0e\x02\x03\x06\x12\x04\xf4\x04\x0b\x13\
    \n\r\n\x05\x04\x0e\x02\x03\x01\x12\x04\xf4\x04\x14\x1d\n\r\n\x05\x04\x0e\
    \x02\x03\x03\x12\x04\xf4\x04\x20!\nL\n\x02\x04\x0f\x12\x06\xf8\x04\0\xfb\
    \x04\x01\x1a>\x20The\x20response\x20for\x20[Commit][google.spanner.v1.Sp\
    anner.Commit].\n\n\x0b\n\x03\x04\x0f\x01\x12\x04\xf8\x04\x08\x16\nO\n\
    \x04\x04\x0f\x02\0\x12\x04\xfa\x04\x021\x1aA\x20The\x20Cloud\x20Spanner\
    \x20timestamp\x20at\x20which\x20the\x20transaction\x20committed.\n\n\x0f\
    \n\x05\x04\x0f\x02\0\x04\x12\x06\xfa\x04\x02\xf8\x04\x18\n\r\n\x05\x04\
    \x0f\x02\0\x06\x12\x04\xfa\x04\x02\x1b\n\r\n\x05\x04\x0f\x02\0\x01\x12\
    \x04\xfa\x04\x1c,\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xfa\x04/0\nO\n\x02\
    \x04\x10\x12\x06\xfe\x04\0\x84\x05\x01\x1aA\x20The\x20request\x20for\x20\
    [Rollback][google.spanner.v1.Spanner.Rollback].\n\n\x0b\n\x03\x04\x10\
    \x01\x12\x04\xfe\x04\x08\x17\nW\n\x04\x04\x10\x02\0\x12\x04\x80\x05\x02\
    \x15\x1aI\x20Required.\x20The\x20session\x20in\x20which\x20the\x20transa\
    ction\x20to\x20roll\x20back\x20is\x20running.\n\n\x0f\n\x05\x04\x10\x02\
    \0\x04\x12\x06\x80\x05\x02\xfe\x04\x19\n\r\n\x05\x04\x10\x02\0\x05\x12\
    \x04\x80\x05\x02\x08\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x80\x05\t\x10\n\
    \r\n\x05\x04\x10\x02\0\x03\x12\x04\x80\x05\x13\x14\n7\n\x04\x04\x10\x02\
    \x01\x12\x04\x83\x05\x02\x1b\x1a)\x20Required.\x20The\x20transaction\x20\
    to\x20roll\x20back.\n\n\x0f\n\x05\x04\x10\x02\x01\x04\x12\x06\x83\x05\
    \x02\x80\x05\x15\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\x83\x05\x02\x07\n\
    \r\n\x05\x04\x10\x02\x01\x01\x12\x04\x83\x05\x08\x16\n\r\n\x05\x04\x10\
    \x02\x01\x03\x12\x04\x83\x05\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
